{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev.js';\nimport { ensureTokenIsValid, secretToken } from './secrets.js';\nimport { getTrustedTypes, getTrustedTypesPolicy } from './trusted_types.js';\n/**\n * Runtime implementation of `TrustedHTML` in browsers that don't support it.\n */\nclass HtmlImpl {\n  constructor(html, token) {\n    ensureTokenIsValid(token);\n    this.privateDoNotAccessOrElseWrappedHtml = html;\n  }\n  toString() {\n    return this.privateDoNotAccessOrElseWrappedHtml.toString();\n  }\n}\nfunction createTrustedHtmlOrPolyfill(html, trusted) {\n  return trusted !== null && trusted !== void 0 ? trusted : new HtmlImpl(html, secretToken);\n}\nconst GlobalTrustedHTML = typeof window !== 'undefined' ? window.TrustedHTML : undefined;\n/**\n * Also exports the constructor so that instanceof checks work.\n */\nexport const SafeHtml = GlobalTrustedHTML !== null && GlobalTrustedHTML !== void 0 ? GlobalTrustedHTML : HtmlImpl;\n/**\n * Builds a new `SafeHtml` from the given string, without enforcing safety\n * guarantees. It may cause side effects by creating a Trusted Types policy.\n * This shouldn't be exposed to application developers, and must only be used as\n * a step towards safe builders or safe constants.\n */\nexport function createHtmlInternal(html) {\n  var _a;\n  /** @noinline */\n  const noinlineHtml = html;\n  return createTrustedHtmlOrPolyfill(noinlineHtml, (_a = getTrustedTypesPolicy()) === null || _a === void 0 ? void 0 : _a.createHTML(noinlineHtml));\n}\n/**\n * An empty `SafeHtml` constant.\n * Unlike the function above, using this will not create a policy.\n */\nexport const EMPTY_HTML = /* #__PURE__ */(() => {\n  var _a;\n  return createTrustedHtmlOrPolyfill('', (_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.emptyHTML);\n})();\n/**\n * Checks if the given value is a `SafeHtml` instance.\n */\nexport function isHtml(value) {\n  var _a;\n  return ((_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.isHTML(value)) || value instanceof HtmlImpl;\n}\n/**\n * Returns the value of the passed `SafeHtml` object while ensuring it\n * has the correct type.\n *\n * Returns a native `TrustedHTML` or a string if Trusted Types are disabled.\n */\nexport function unwrapHtml(value) {\n  var _a;\n  if ((_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.isHTML(value)) {\n    return value;\n  } else if (value instanceof HtmlImpl) {\n    return value.privateDoNotAccessOrElseWrappedHtml;\n  } else {\n    let message = '';\n    if (process.env.NODE_ENV !== 'production') {\n      message = 'Unexpected type when unwrapping SafeHtml';\n    }\n    throw new Error(message);\n  }\n}","map":{"version":3,"names":["ensureTokenIsValid","secretToken","getTrustedTypes","getTrustedTypesPolicy","HtmlImpl","constructor","html","token","privateDoNotAccessOrElseWrappedHtml","toString","createTrustedHtmlOrPolyfill","trusted","GlobalTrustedHTML","window","TrustedHTML","undefined","SafeHtml","createHtmlInternal","_a","noinlineHtml","createHTML","EMPTY_HTML","emptyHTML","isHtml","value","isHTML","unwrapHtml","message","process","env","NODE_ENV","Error"],"sources":["E:/HTML/Udemy_Full Stack Web/AI-SCET Website/aiscet/node_modules/safevalues/dist/mjs/internals/html_impl.js"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev.js';\nimport { ensureTokenIsValid, secretToken } from './secrets.js';\nimport { getTrustedTypes, getTrustedTypesPolicy } from './trusted_types.js';\n/**\n * Runtime implementation of `TrustedHTML` in browsers that don't support it.\n */\nclass HtmlImpl {\n    constructor(html, token) {\n        ensureTokenIsValid(token);\n        this.privateDoNotAccessOrElseWrappedHtml = html;\n    }\n    toString() {\n        return this.privateDoNotAccessOrElseWrappedHtml.toString();\n    }\n}\nfunction createTrustedHtmlOrPolyfill(html, trusted) {\n    return (trusted !== null && trusted !== void 0 ? trusted : new HtmlImpl(html, secretToken));\n}\nconst GlobalTrustedHTML = typeof window !== 'undefined' ? window.TrustedHTML : undefined;\n/**\n * Also exports the constructor so that instanceof checks work.\n */\nexport const SafeHtml = (GlobalTrustedHTML !== null && GlobalTrustedHTML !== void 0 ? GlobalTrustedHTML : HtmlImpl);\n/**\n * Builds a new `SafeHtml` from the given string, without enforcing safety\n * guarantees. It may cause side effects by creating a Trusted Types policy.\n * This shouldn't be exposed to application developers, and must only be used as\n * a step towards safe builders or safe constants.\n */\nexport function createHtmlInternal(html) {\n    var _a;\n    /** @noinline */\n    const noinlineHtml = html;\n    return createTrustedHtmlOrPolyfill(noinlineHtml, (_a = getTrustedTypesPolicy()) === null || _a === void 0 ? void 0 : _a.createHTML(noinlineHtml));\n}\n/**\n * An empty `SafeHtml` constant.\n * Unlike the function above, using this will not create a policy.\n */\nexport const EMPTY_HTML = /* #__PURE__ */ (() => { var _a; return createTrustedHtmlOrPolyfill('', (_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.emptyHTML); })();\n/**\n * Checks if the given value is a `SafeHtml` instance.\n */\nexport function isHtml(value) {\n    var _a;\n    return ((_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.isHTML(value)) || value instanceof HtmlImpl;\n}\n/**\n * Returns the value of the passed `SafeHtml` object while ensuring it\n * has the correct type.\n *\n * Returns a native `TrustedHTML` or a string if Trusted Types are disabled.\n */\nexport function unwrapHtml(value) {\n    var _a;\n    if ((_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.isHTML(value)) {\n        return value;\n    }\n    else if (value instanceof HtmlImpl) {\n        return value.privateDoNotAccessOrElseWrappedHtml;\n    }\n    else {\n        let message = '';\n        if (process.env.NODE_ENV !== 'production') {\n            message = 'Unexpected type when unwrapping SafeHtml';\n        }\n        throw new Error(message);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,uBAAuB;AAC9B,SAASA,kBAAkB,EAAEC,WAAW,QAAQ,cAAc;AAC9D,SAASC,eAAe,EAAEC,qBAAqB,QAAQ,oBAAoB;AAC3E;AACA;AACA;AACA,MAAMC,QAAQ,CAAC;EACXC,WAAWA,CAACC,IAAI,EAAEC,KAAK,EAAE;IACrBP,kBAAkB,CAACO,KAAK,CAAC;IACzB,IAAI,CAACC,mCAAmC,GAAGF,IAAI;EACnD;EACAG,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAACD,mCAAmC,CAACC,QAAQ,CAAC,CAAC;EAC9D;AACJ;AACA,SAASC,2BAA2BA,CAACJ,IAAI,EAAEK,OAAO,EAAE;EAChD,OAAQA,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAGA,OAAO,GAAG,IAAIP,QAAQ,CAACE,IAAI,EAAEL,WAAW,CAAC;AAC9F;AACA,MAAMW,iBAAiB,GAAG,OAAOC,MAAM,KAAK,WAAW,GAAGA,MAAM,CAACC,WAAW,GAAGC,SAAS;AACxF;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAIJ,iBAAiB,KAAK,IAAI,IAAIA,iBAAiB,KAAK,KAAK,CAAC,GAAGA,iBAAiB,GAAGR,QAAS;AACnH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASa,kBAAkBA,CAACX,IAAI,EAAE;EACrC,IAAIY,EAAE;EACN;EACA,MAAMC,YAAY,GAAGb,IAAI;EACzB,OAAOI,2BAA2B,CAACS,YAAY,EAAE,CAACD,EAAE,GAAGf,qBAAqB,CAAC,CAAC,MAAM,IAAI,IAAIe,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACE,UAAU,CAACD,YAAY,CAAC,CAAC;AACrJ;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,UAAU,GAAG,eAAgB,CAAC,MAAM;EAAE,IAAIH,EAAE;EAAE,OAAOR,2BAA2B,CAAC,EAAE,EAAE,CAACQ,EAAE,GAAGhB,eAAe,CAAC,CAAC,MAAM,IAAI,IAAIgB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACI,SAAS,CAAC;AAAE,CAAC,EAAE,CAAC;AACnL;AACA;AACA;AACA,OAAO,SAASC,MAAMA,CAACC,KAAK,EAAE;EAC1B,IAAIN,EAAE;EACN,OAAO,CAAC,CAACA,EAAE,GAAGhB,eAAe,CAAC,CAAC,MAAM,IAAI,IAAIgB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACO,MAAM,CAACD,KAAK,CAAC,KAAKA,KAAK,YAAYpB,QAAQ;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASsB,UAAUA,CAACF,KAAK,EAAE;EAC9B,IAAIN,EAAE;EACN,IAAI,CAACA,EAAE,GAAGhB,eAAe,CAAC,CAAC,MAAM,IAAI,IAAIgB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACO,MAAM,CAACD,KAAK,CAAC,EAAE;IAChF,OAAOA,KAAK;EAChB,CAAC,MACI,IAAIA,KAAK,YAAYpB,QAAQ,EAAE;IAChC,OAAOoB,KAAK,CAAChB,mCAAmC;EACpD,CAAC,MACI;IACD,IAAImB,OAAO,GAAG,EAAE;IAChB,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACvCH,OAAO,GAAG,0CAA0C;IACxD;IACA,MAAM,IAAII,KAAK,CAACJ,OAAO,CAAC;EAC5B;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}