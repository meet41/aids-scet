{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/** @fileoverview Internal implementations of SafeAttributePrefix. */\nimport '../environment/dev.js';\nimport { ensureTokenIsValid, secretToken } from './secrets.js';\n/**\n * A prefix with which an attribute is safe to set using plain strings.\n */\nexport class SafeAttributePrefix {\n  constructor(token, value) {\n    if (process.env.NODE_ENV !== 'production') {\n      ensureTokenIsValid(token);\n    }\n    this.privateDoNotAccessOrElseWrappedAttributePrefix = value;\n  }\n  toString() {\n    return this.privateDoNotAccessOrElseWrappedAttributePrefix;\n  }\n}\nconst AttributePrefixImpl = SafeAttributePrefix;\n/**\n * Builds a new `SafeAttributePrefix` from the given string, without enforcing\n * safety guarantees. This shouldn't be exposed to application developers, and\n * must only be used as a step towards safe builders or safe constants.\n */\nexport function createAttributePrefixInternal(value) {\n  return new AttributePrefixImpl(secretToken, value);\n}\n/**\n * Checks if the given value is a `SafeAttributePrefix` instance.\n */\nexport function isAttributePrefix(value) {\n  return value instanceof SafeAttributePrefix;\n}\n/**\n * Returns the string value of the passed `SafeAttributePrefix` object while\n * ensuring it has the correct type.\n */\nexport function unwrapAttributePrefix(value) {\n  if (isAttributePrefix(value)) {\n    return value.privateDoNotAccessOrElseWrappedAttributePrefix;\n  }\n  let message = '';\n  if (process.env.NODE_ENV !== 'production') {\n    message = `Unexpected type when unwrapping SafeAttributePrefix, got '${value}' of type '${typeof value}'`;\n  }\n  throw new Error(message);\n}","map":{"version":3,"names":["ensureTokenIsValid","secretToken","SafeAttributePrefix","constructor","token","value","process","env","NODE_ENV","privateDoNotAccessOrElseWrappedAttributePrefix","toString","AttributePrefixImpl","createAttributePrefixInternal","isAttributePrefix","unwrapAttributePrefix","message","Error"],"sources":["E:/HTML/Udemy_Full Stack Web/AI-SCET Website/aiscet/node_modules/safevalues/dist/mjs/internals/attribute_impl.js"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/** @fileoverview Internal implementations of SafeAttributePrefix. */\nimport '../environment/dev.js';\nimport { ensureTokenIsValid, secretToken } from './secrets.js';\n/**\n * A prefix with which an attribute is safe to set using plain strings.\n */\nexport class SafeAttributePrefix {\n    constructor(token, value) {\n        if (process.env.NODE_ENV !== 'production') {\n            ensureTokenIsValid(token);\n        }\n        this.privateDoNotAccessOrElseWrappedAttributePrefix = value;\n    }\n    toString() {\n        return this.privateDoNotAccessOrElseWrappedAttributePrefix;\n    }\n}\nconst AttributePrefixImpl = SafeAttributePrefix;\n/**\n * Builds a new `SafeAttributePrefix` from the given string, without enforcing\n * safety guarantees. This shouldn't be exposed to application developers, and\n * must only be used as a step towards safe builders or safe constants.\n */\nexport function createAttributePrefixInternal(value) {\n    return new AttributePrefixImpl(secretToken, value);\n}\n/**\n * Checks if the given value is a `SafeAttributePrefix` instance.\n */\nexport function isAttributePrefix(value) {\n    return value instanceof SafeAttributePrefix;\n}\n/**\n * Returns the string value of the passed `SafeAttributePrefix` object while\n * ensuring it has the correct type.\n */\nexport function unwrapAttributePrefix(value) {\n    if (isAttributePrefix(value)) {\n        return value\n            .privateDoNotAccessOrElseWrappedAttributePrefix;\n    }\n    let message = '';\n    if (process.env.NODE_ENV !== 'production') {\n        message = `Unexpected type when unwrapping SafeAttributePrefix, got '${value}' of type '${typeof value}'`;\n    }\n    throw new Error(message);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,uBAAuB;AAC9B,SAASA,kBAAkB,EAAEC,WAAW,QAAQ,cAAc;AAC9D;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,CAAC;EAC7BC,WAAWA,CAACC,KAAK,EAAEC,KAAK,EAAE;IACtB,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACvCR,kBAAkB,CAACI,KAAK,CAAC;IAC7B;IACA,IAAI,CAACK,8CAA8C,GAAGJ,KAAK;EAC/D;EACAK,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAACD,8CAA8C;EAC9D;AACJ;AACA,MAAME,mBAAmB,GAAGT,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA,OAAO,SAASU,6BAA6BA,CAACP,KAAK,EAAE;EACjD,OAAO,IAAIM,mBAAmB,CAACV,WAAW,EAAEI,KAAK,CAAC;AACtD;AACA;AACA;AACA;AACA,OAAO,SAASQ,iBAAiBA,CAACR,KAAK,EAAE;EACrC,OAAOA,KAAK,YAAYH,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA,OAAO,SAASY,qBAAqBA,CAACT,KAAK,EAAE;EACzC,IAAIQ,iBAAiB,CAACR,KAAK,CAAC,EAAE;IAC1B,OAAOA,KAAK,CACPI,8CAA8C;EACvD;EACA,IAAIM,OAAO,GAAG,EAAE;EAChB,IAAIT,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACvCO,OAAO,GAAG,6DAA6DV,KAAK,cAAc,OAAOA,KAAK,GAAG;EAC7G;EACA,MAAM,IAAIW,KAAK,CAACD,OAAO,CAAC;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}