{"ast":null,"code":"var _jsxFileName = \"E:\\\\HTML\\\\Udemy_Full Stack Web\\\\AI-SCET Website\\\\aiscet\\\\src\\\\components\\\\ImageUploader.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { storage, ref, uploadBytes, getDownloadURL, listAll } from '../firebase';\n\n// const ImageUploader = () => {\n//   const [message, setMessage] = useState('');\n//   const [fileList, setFileList] = useState([]);\n\n//   useEffect(() => {\n//     const fetchFiles = async () => {\n//       const folderRef = ref(storage, 'your-folder-name'); // Replace 'your-folder-name' with your folder name\n//       try {\n//         const res = await listAll(folderRef);\n//         const urls = await Promise.all(res.items.map(itemRef => getDownloadURL(itemRef)));\n//         setFileList(urls);\n//       } catch (error) {\n//         console.error('Error fetching files:', error);\n//       }\n//     };\n\n//     fetchFiles();\n//   }, []);\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     setMessage('Uploading...');\n\n//     const fileInput = event.target.elements.image;\n//     const file = fileInput.files[0];\n//     const storageRef = ref(storage, `your-folder-name/${file.name}`); // Replace 'your-folder-name' with your folder name\n\n//     try {\n//       await uploadBytes(storageRef, file);\n//       const fileUrl = await getDownloadURL(storageRef);\n//       setMessage(`Upload successful! File URL: ${fileUrl}`);\n//       setFileList(prevList => [...prevList, fileUrl]);\n//     } catch (error) {\n//       setMessage(`Upload failed: ${error.message}`);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         <input type=\"file\" name=\"image\" />\n//         <button type=\"submit\">Upload</button>\n//         <p>{message}</p>\n//       </form>\n//       <h3>Uploaded Files:</h3>\n//       <ul>\n//         {fileList.map((url, index) => (\n//           <li key={index}><a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{url}</a></li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default ImageUploader;\n\n// ImageUploader.jsx\n// import React, { useState } from 'react';\n// import { storage, ref, uploadBytes, getDownloadURL } from '../firebase';\n\n// const ImageUploader = () => {\n//   const [message, setMessage] = useState('');\n//   const [fileList, setFileList] = useState([]);\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     setMessage('Uploading...');\n\n//     const fileInput = event.target.elements.image;\n//     const file = fileInput.files[0];\n//     const storageRef = ref(storage, `images/${file.name}`);\n\n//     try {\n//       await uploadBytes(storageRef, file);\n//       const fileUrl = await getDownloadURL(storageRef);\n//       setMessage(`Upload successful! File URL: ${fileUrl}`);\n//       setFileList(prevList => [...prevList, fileUrl]);\n//     } catch (error) {\n//       setMessage(`Upload failed: ${error.message}`);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         <input type=\"file\" name=\"image\" />\n//         <button type=\"submit\">Upload</button>\n//         <p>{message}</p>\n//       </form>\n//       <h3>Uploaded Files:</h3>\n//       <ul>\n//         {fileList.map((url, index) => (\n//           <li key={index}><a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{url}</a></li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default ImageUploader;\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageUploader = () => {\n  _s();\n  const [imageFile, setImageFile] = useState(null);\n  const handleUpload = async () => {\n    try {\n      const formData = new FormData();\n      formData.append('image', imageFile);\n      const response = await axios.post('http://your-server-url/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      console.log('Upload successful:', response.data);\n    } catch (error) {\n      if (error.response) {\n        console.error('Error response:', error.response.data);\n        console.error('Error status:', error.response.status);\n        console.error('Error headers:', error.response.headers);\n      } else if (error.request) {\n        console.error('Error request:', error.request);\n      } else {\n        console.error('Error message:', error.message);\n      }\n      console.error('Error config:', error.config);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: e => setImageFile(e.target.files[0])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageUploader, \"UX11SaMDXMQgabJ4+ICC2CzRyxM=\");\n_c = ImageUploader;\nexport default ImageUploader;\nvar _c;\n$RefreshReg$(_c, \"ImageUploader\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ImageUploader","_s","imageFile","setImageFile","handleUpload","formData","FormData","append","response","post","headers","console","log","data","error","status","request","message","config","children","type","onChange","e","target","files","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["E:/HTML/Udemy_Full Stack Web/AI-SCET Website/aiscet/src/components/ImageUploader.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { storage, ref, uploadBytes, getDownloadURL, listAll } from '../firebase';\r\n\r\n// const ImageUploader = () => {\r\n//   const [message, setMessage] = useState('');\r\n//   const [fileList, setFileList] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchFiles = async () => {\r\n//       const folderRef = ref(storage, 'your-folder-name'); // Replace 'your-folder-name' with your folder name\r\n//       try {\r\n//         const res = await listAll(folderRef);\r\n//         const urls = await Promise.all(res.items.map(itemRef => getDownloadURL(itemRef)));\r\n//         setFileList(urls);\r\n//       } catch (error) {\r\n//         console.error('Error fetching files:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchFiles();\r\n//   }, []);\r\n\r\n//   const handleSubmit = async (event) => {\r\n//     event.preventDefault();\r\n//     setMessage('Uploading...');\r\n\r\n//     const fileInput = event.target.elements.image;\r\n//     const file = fileInput.files[0];\r\n//     const storageRef = ref(storage, `your-folder-name/${file.name}`); // Replace 'your-folder-name' with your folder name\r\n\r\n//     try {\r\n//       await uploadBytes(storageRef, file);\r\n//       const fileUrl = await getDownloadURL(storageRef);\r\n//       setMessage(`Upload successful! File URL: ${fileUrl}`);\r\n//       setFileList(prevList => [...prevList, fileUrl]);\r\n//     } catch (error) {\r\n//       setMessage(`Upload failed: ${error.message}`);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <input type=\"file\" name=\"image\" />\r\n//         <button type=\"submit\">Upload</button>\r\n//         <p>{message}</p>\r\n//       </form>\r\n//       <h3>Uploaded Files:</h3>\r\n//       <ul>\r\n//         {fileList.map((url, index) => (\r\n//           <li key={index}><a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{url}</a></li>\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ImageUploader;\r\n\r\n// ImageUploader.jsx\r\n// import React, { useState } from 'react';\r\n// import { storage, ref, uploadBytes, getDownloadURL } from '../firebase';\r\n\r\n// const ImageUploader = () => {\r\n//   const [message, setMessage] = useState('');\r\n//   const [fileList, setFileList] = useState([]);\r\n\r\n//   const handleSubmit = async (event) => {\r\n//     event.preventDefault();\r\n//     setMessage('Uploading...');\r\n\r\n//     const fileInput = event.target.elements.image;\r\n//     const file = fileInput.files[0];\r\n//     const storageRef = ref(storage, `images/${file.name}`);\r\n\r\n//     try {\r\n//       await uploadBytes(storageRef, file);\r\n//       const fileUrl = await getDownloadURL(storageRef);\r\n//       setMessage(`Upload successful! File URL: ${fileUrl}`);\r\n//       setFileList(prevList => [...prevList, fileUrl]);\r\n//     } catch (error) {\r\n//       setMessage(`Upload failed: ${error.message}`);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <input type=\"file\" name=\"image\" />\r\n//         <button type=\"submit\">Upload</button>\r\n//         <p>{message}</p>\r\n//       </form>\r\n//       <h3>Uploaded Files:</h3>\r\n//       <ul>\r\n//         {fileList.map((url, index) => (\r\n//           <li key={index}><a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{url}</a></li>\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ImageUploader;\r\n\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst ImageUploader = () => {\r\n  const [imageFile, setImageFile] = useState(null);\r\n\r\n  const handleUpload = async () => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('image', imageFile);\r\n\r\n      const response = await axios.post('http://your-server-url/upload', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n\r\n      console.log('Upload successful:', response.data);\r\n    } catch (error) {\r\n      if (error.response) {\r\n        console.error('Error response:', error.response.data);\r\n        console.error('Error status:', error.response.status);\r\n        console.error('Error headers:', error.response.headers);\r\n      } else if (error.request) {\r\n        console.error('Error request:', error.request);\r\n      } else {\r\n        console.error('Error message:', error.message);\r\n      }\r\n      console.error('Error config:', error.config);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"file\" onChange={(e) => setImageFile(e.target.files[0])} />\r\n      <button onClick={handleUpload}>Upload</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUploader;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}