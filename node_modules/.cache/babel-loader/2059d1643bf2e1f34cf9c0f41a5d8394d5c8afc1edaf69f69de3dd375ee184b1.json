{"ast":null,"code":"var _jsxFileName = \"E:\\\\HTML\\\\Udemy_Full Stack Web\\\\AI-SCET Website\\\\aiscet\\\\src\\\\components\\\\ImageUploader.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { storage, ref, uploadBytes, getDownloadURL, listAll } from '../firebase';\n\n// const ImageUploader = () => {\n//   const [message, setMessage] = useState('');\n//   const [fileList, setFileList] = useState([]);\n\n//   useEffect(() => {\n//     const fetchFiles = async () => {\n//       const folderRef = ref(storage, 'your-folder-name'); // Replace 'your-folder-name' with your folder name\n//       try {\n//         const res = await listAll(folderRef);\n//         const urls = await Promise.all(res.items.map(itemRef => getDownloadURL(itemRef)));\n//         setFileList(urls);\n//       } catch (error) {\n//         console.error('Error fetching files:', error);\n//       }\n//     };\n\n//     fetchFiles();\n//   }, []);\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     setMessage('Uploading...');\n\n//     const fileInput = event.target.elements.image;\n//     const file = fileInput.files[0];\n//     const storageRef = ref(storage, `your-folder-name/${file.name}`); // Replace 'your-folder-name' with your folder name\n\n//     try {\n//       await uploadBytes(storageRef, file);\n//       const fileUrl = await getDownloadURL(storageRef);\n//       setMessage(`Upload successful! File URL: ${fileUrl}`);\n//       setFileList(prevList => [...prevList, fileUrl]);\n//     } catch (error) {\n//       setMessage(`Upload failed: ${error.message}`);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         <input type=\"file\" name=\"image\" />\n//         <button type=\"submit\">Upload</button>\n//         <p>{message}</p>\n//       </form>\n//       <h3>Uploaded Files:</h3>\n//       <ul>\n//         {fileList.map((url, index) => (\n//           <li key={index}><a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{url}</a></li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default ImageUploader;\n\n// ImageUploader.jsx\nimport React, { useState } from 'react';\nimport { storage, ref, uploadBytes, getDownloadURL } from '../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageUploader = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [fileList, setFileList] = useState([]);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setMessage('Uploading...');\n    const fileInput = event.target.elements.image;\n    const file = fileInput.files[0];\n    const storageRef = ref(storage, `images/${file.name}`);\n    try {\n      await uploadBytes(storageRef, file);\n      const fileUrl = await getDownloadURL(storageRef);\n      setMessage(`Upload successful! File URL: ${fileUrl}`);\n      setFileList(prevList => [...prevList, fileUrl]);\n    } catch (error) {\n      setMessage(`Upload failed: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        name: \"image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Uploaded Files:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: fileList.map((url, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: url,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: url\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 27\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageUploader, \"NAtJdk7C8q7th5EyKGhZAtvGGqE=\");\n_c = ImageUploader;\nexport default ImageUploader;\nvar _c;\n$RefreshReg$(_c, \"ImageUploader\");","map":{"version":3,"names":["React","useState","storage","ref","uploadBytes","getDownloadURL","jsxDEV","_jsxDEV","ImageUploader","_s","message","setMessage","fileList","setFileList","handleSubmit","event","preventDefault","fileInput","target","elements","image","file","files","storageRef","name","fileUrl","prevList","error","children","onSubmit","type","fileName","_jsxFileName","lineNumber","columnNumber","map","url","index","href","rel","_c","$RefreshReg$"],"sources":["E:/HTML/Udemy_Full Stack Web/AI-SCET Website/aiscet/src/components/ImageUploader.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { storage, ref, uploadBytes, getDownloadURL, listAll } from '../firebase';\r\n\r\n// const ImageUploader = () => {\r\n//   const [message, setMessage] = useState('');\r\n//   const [fileList, setFileList] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchFiles = async () => {\r\n//       const folderRef = ref(storage, 'your-folder-name'); // Replace 'your-folder-name' with your folder name\r\n//       try {\r\n//         const res = await listAll(folderRef);\r\n//         const urls = await Promise.all(res.items.map(itemRef => getDownloadURL(itemRef)));\r\n//         setFileList(urls);\r\n//       } catch (error) {\r\n//         console.error('Error fetching files:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchFiles();\r\n//   }, []);\r\n\r\n//   const handleSubmit = async (event) => {\r\n//     event.preventDefault();\r\n//     setMessage('Uploading...');\r\n\r\n//     const fileInput = event.target.elements.image;\r\n//     const file = fileInput.files[0];\r\n//     const storageRef = ref(storage, `your-folder-name/${file.name}`); // Replace 'your-folder-name' with your folder name\r\n\r\n//     try {\r\n//       await uploadBytes(storageRef, file);\r\n//       const fileUrl = await getDownloadURL(storageRef);\r\n//       setMessage(`Upload successful! File URL: ${fileUrl}`);\r\n//       setFileList(prevList => [...prevList, fileUrl]);\r\n//     } catch (error) {\r\n//       setMessage(`Upload failed: ${error.message}`);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <input type=\"file\" name=\"image\" />\r\n//         <button type=\"submit\">Upload</button>\r\n//         <p>{message}</p>\r\n//       </form>\r\n//       <h3>Uploaded Files:</h3>\r\n//       <ul>\r\n//         {fileList.map((url, index) => (\r\n//           <li key={index}><a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{url}</a></li>\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ImageUploader;\r\n\r\n// ImageUploader.jsx\r\nimport React, { useState } from 'react';\r\nimport { storage, ref, uploadBytes, getDownloadURL } from '../firebase';\r\n\r\nconst ImageUploader = () => {\r\n  const [message, setMessage] = useState('');\r\n  const [fileList, setFileList] = useState([]);\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    setMessage('Uploading...');\r\n\r\n    const fileInput = event.target.elements.image;\r\n    const file = fileInput.files[0];\r\n    const storageRef = ref(storage, `images/${file.name}`);\r\n\r\n    try {\r\n      await uploadBytes(storageRef, file);\r\n      const fileUrl = await getDownloadURL(storageRef);\r\n      setMessage(`Upload successful! File URL: ${fileUrl}`);\r\n      setFileList(prevList => [...prevList, fileUrl]);\r\n    } catch (error) {\r\n      setMessage(`Upload failed: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <input type=\"file\" name=\"image\" />\r\n        <button type=\"submit\">Upload</button>\r\n        <p>{message}</p>\r\n      </form>\r\n      <h3>Uploaded Files:</h3>\r\n      <ul>\r\n        {fileList.map((url, index) => (\r\n          <li key={index}><a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{url}</a></li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUploader;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}