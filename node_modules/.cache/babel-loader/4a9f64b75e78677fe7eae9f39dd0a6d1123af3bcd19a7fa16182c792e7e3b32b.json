{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../../environment/dev.js';\nimport { createHtmlInternal, unwrapHtml } from '../../internals/html_impl.js';\n/** Safely parses a string using the HTML parser. */\nexport function parseHtml(parser, html) {\n  return parseFromString(parser, html, 'text/html');\n}\n/**\n * Safely parses a string using the XML parser. If the XML document is found to\n * contain any elements from the HTML or SVG namespaces, an error is thrown for\n * security reasons.\n */\nexport function parseXml(parser, xml) {\n  const doc = parseFromString(parser, createHtmlInternal(xml), 'text/xml');\n  const iterator = document.createNodeIterator(doc, NodeFilter.SHOW_ALL);\n  let currentNode;\n  while (currentNode = iterator.nextNode()) {\n    if (currentNode instanceof HTMLElement || currentNode instanceof SVGElement) {\n      let message = 'unsafe XML';\n      if (process.env.NODE_ENV !== 'production') {\n        message = `attempted to parse an XML document that embeds HTML or SVG content`;\n      }\n      throw new Error(message);\n    }\n  }\n  return doc;\n}\n/** Safely parses a string using the HTML or XML parser. */\nexport function parseFromString(parser, content, contentType) {\n  return parser.parseFromString(unwrapHtml(content), contentType);\n}","map":{"version":3,"names":["createHtmlInternal","unwrapHtml","parseHtml","parser","html","parseFromString","parseXml","xml","doc","iterator","document","createNodeIterator","NodeFilter","SHOW_ALL","currentNode","nextNode","HTMLElement","SVGElement","message","process","env","NODE_ENV","Error","content","contentType"],"sources":["E:/HTML/Udemy_Full Stack Web/AI-SCET Website/aiscet/node_modules/safevalues/dist/mjs/dom/globals/dom_parser.js"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../../environment/dev.js';\nimport { createHtmlInternal, unwrapHtml, } from '../../internals/html_impl.js';\n/** Safely parses a string using the HTML parser. */\nexport function parseHtml(parser, html) {\n    return parseFromString(parser, html, 'text/html');\n}\n/**\n * Safely parses a string using the XML parser. If the XML document is found to\n * contain any elements from the HTML or SVG namespaces, an error is thrown for\n * security reasons.\n */\nexport function parseXml(parser, xml) {\n    const doc = parseFromString(parser, createHtmlInternal(xml), 'text/xml');\n    const iterator = document.createNodeIterator(doc, NodeFilter.SHOW_ALL);\n    let currentNode;\n    while ((currentNode = iterator.nextNode())) {\n        if (currentNode instanceof HTMLElement ||\n            currentNode instanceof SVGElement) {\n            let message = 'unsafe XML';\n            if (process.env.NODE_ENV !== 'production') {\n                message = `attempted to parse an XML document that embeds HTML or SVG content`;\n            }\n            throw new Error(message);\n        }\n    }\n    return doc;\n}\n/** Safely parses a string using the HTML or XML parser. */\nexport function parseFromString(parser, content, contentType) {\n    return parser.parseFromString(unwrapHtml(content), contentType);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,0BAA0B;AACjC,SAASA,kBAAkB,EAAEC,UAAU,QAAS,8BAA8B;AAC9E;AACA,OAAO,SAASC,SAASA,CAACC,MAAM,EAAEC,IAAI,EAAE;EACpC,OAAOC,eAAe,CAACF,MAAM,EAAEC,IAAI,EAAE,WAAW,CAAC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,QAAQA,CAACH,MAAM,EAAEI,GAAG,EAAE;EAClC,MAAMC,GAAG,GAAGH,eAAe,CAACF,MAAM,EAAEH,kBAAkB,CAACO,GAAG,CAAC,EAAE,UAAU,CAAC;EACxE,MAAME,QAAQ,GAAGC,QAAQ,CAACC,kBAAkB,CAACH,GAAG,EAAEI,UAAU,CAACC,QAAQ,CAAC;EACtE,IAAIC,WAAW;EACf,OAAQA,WAAW,GAAGL,QAAQ,CAACM,QAAQ,CAAC,CAAC,EAAG;IACxC,IAAID,WAAW,YAAYE,WAAW,IAClCF,WAAW,YAAYG,UAAU,EAAE;MACnC,IAAIC,OAAO,GAAG,YAAY;MAC1B,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;QACvCH,OAAO,GAAG,oEAAoE;MAClF;MACA,MAAM,IAAII,KAAK,CAACJ,OAAO,CAAC;IAC5B;EACJ;EACA,OAAOV,GAAG;AACd;AACA;AACA,OAAO,SAASH,eAAeA,CAACF,MAAM,EAAEoB,OAAO,EAAEC,WAAW,EAAE;EAC1D,OAAOrB,MAAM,CAACE,eAAe,CAACJ,UAAU,CAACsB,OAAO,CAAC,EAAEC,WAAW,CAAC;AACnE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}