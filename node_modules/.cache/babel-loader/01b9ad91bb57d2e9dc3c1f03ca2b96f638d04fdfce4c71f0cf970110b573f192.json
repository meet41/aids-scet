{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * @fileoverview This contains safe wrappers for properties that aren't specific\n * to one kind of HTMLElement (like innerHTML), plus other setters and functions\n * that are not tied to elements (like location.href or Worker constructor).\n */\nimport '../../environment/dev.js';\nimport { unwrapAttributePrefix } from '../../internals/attribute_impl.js';\nimport { unwrapHtml } from '../../internals/html_impl.js';\n/**\n * Safely set {@link Element.innerHTML} on a given ShadowRoot or Element which\n * may not be a `<script>` element or a `<style>` element.\n */\nexport function setInnerHtml(elOrRoot, v) {\n  if (isElement(elOrRoot)) {\n    throwIfScriptOrStyle(elOrRoot);\n  }\n  elOrRoot.innerHTML = unwrapHtml(v);\n}\n/**\n * Safely set {@link Element.outerHTML} for the given Element.\n */\nexport function setOuterHtml(e, v) {\n  const parent = e.parentElement;\n  if (parent !== null) {\n    throwIfScriptOrStyle(parent);\n  }\n  e.outerHTML = unwrapHtml(v);\n}\n/**\n * Safely call {@link Element.insertAdjacentHTML} for the given Element.\n */\nexport function insertAdjacentHtml(element, position, v) {\n  const tagContext = position === 'beforebegin' || position === 'afterend' ? element.parentElement : element;\n  if (tagContext !== null) {\n    throwIfScriptOrStyle(tagContext);\n  }\n  element.insertAdjacentHTML(position, unwrapHtml(v));\n}\n/**\n * Given a set of known-to-be-safe prefixes (e.g., \"data-\", \"aria-\", \"js\"),\n * return a setter function that allows you to set attributes on an element,\n * as long as the names of the attributes to be set has one of the prefixes.\n *\n * The returned setter ensures that setting any dangerous attribute, e.g.,\n * \"src\", \"href\" will cause an exception. This is intended to be used as the\n * safe alterantive of `Element#setAttribute`, when applications need to set\n * attributes that do not have security implications and do not have a\n * corresponding DOM property.\n */\nexport function buildPrefixedAttributeSetter(prefix, ...otherPrefixes) {\n  const prefixes = [prefix, ...otherPrefixes];\n  return (e, attr, value) => {\n    setPrefixedAttribute(prefixes, e, attr, value);\n  };\n}\n/**\n * The safe alternative to Element#setAttribute. The function takes a list of\n * `SafeAttributePrefix`, making developer intention explicit. The attribute\n * to be set must has one of the safe prefixes, otherwise the function throws\n * an Error.\n */\nexport function setPrefixedAttribute(attrPrefixes, e, attr, value) {\n  if (attrPrefixes.length === 0) {\n    let message = '';\n    if (process.env.NODE_ENV !== 'production') {\n      message = 'No prefixes are provided';\n    }\n    throw new Error(message);\n  }\n  const prefixes = attrPrefixes.map(s => unwrapAttributePrefix(s));\n  const attrLower = attr.toLowerCase();\n  if (prefixes.every(p => attrLower.indexOf(p) !== 0)) {\n    throw new Error(`Attribute \"${attr}\" does not match any of the allowed prefixes.`);\n  }\n  e.setAttribute(attr, value);\n}\nfunction throwIfScriptOrStyle(element) {\n  let message = '';\n  const tagName = element.tagName;\n  if (tagName === 'SCRIPT' || tagName === 'STYLE') {\n    if (process.env.NODE_ENV !== 'production') {\n      if (tagName === 'SCRIPT') {\n        message = 'Use safeScriptEl.setTextContent with a SafeScript.';\n      } else {\n        message = 'Use safeStyleEl.setTextContent with a SafeStyleSheet.';\n      }\n    }\n    throw new Error(message);\n  }\n}\nfunction isElement(elOrRoot) {\n  return elOrRoot.nodeType === 1; // Node.ELEMENT_NODE\n}","map":{"version":3,"names":["unwrapAttributePrefix","unwrapHtml","setInnerHtml","elOrRoot","v","isElement","throwIfScriptOrStyle","innerHTML","setOuterHtml","e","parent","parentElement","outerHTML","insertAdjacentHtml","element","position","tagContext","insertAdjacentHTML","buildPrefixedAttributeSetter","prefix","otherPrefixes","prefixes","attr","value","setPrefixedAttribute","attrPrefixes","length","message","process","env","NODE_ENV","Error","map","s","attrLower","toLowerCase","every","p","indexOf","setAttribute","tagName","nodeType"],"sources":["E:/HTML/Udemy_Full Stack Web/AI-SCET Website/aiscet/node_modules/safevalues/dist/mjs/dom/elements/element.js"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * @fileoverview This contains safe wrappers for properties that aren't specific\n * to one kind of HTMLElement (like innerHTML), plus other setters and functions\n * that are not tied to elements (like location.href or Worker constructor).\n */\nimport '../../environment/dev.js';\nimport { unwrapAttributePrefix, } from '../../internals/attribute_impl.js';\nimport { unwrapHtml } from '../../internals/html_impl.js';\n/**\n * Safely set {@link Element.innerHTML} on a given ShadowRoot or Element which\n * may not be a `<script>` element or a `<style>` element.\n */\nexport function setInnerHtml(elOrRoot, v) {\n    if (isElement(elOrRoot)) {\n        throwIfScriptOrStyle(elOrRoot);\n    }\n    elOrRoot.innerHTML = unwrapHtml(v);\n}\n/**\n * Safely set {@link Element.outerHTML} for the given Element.\n */\nexport function setOuterHtml(e, v) {\n    const parent = e.parentElement;\n    if (parent !== null) {\n        throwIfScriptOrStyle(parent);\n    }\n    e.outerHTML = unwrapHtml(v);\n}\n/**\n * Safely call {@link Element.insertAdjacentHTML} for the given Element.\n */\nexport function insertAdjacentHtml(element, position, v) {\n    const tagContext = position === 'beforebegin' || position === 'afterend'\n        ? element.parentElement\n        : element;\n    if (tagContext !== null) {\n        throwIfScriptOrStyle(tagContext);\n    }\n    element.insertAdjacentHTML(position, unwrapHtml(v));\n}\n/**\n * Given a set of known-to-be-safe prefixes (e.g., \"data-\", \"aria-\", \"js\"),\n * return a setter function that allows you to set attributes on an element,\n * as long as the names of the attributes to be set has one of the prefixes.\n *\n * The returned setter ensures that setting any dangerous attribute, e.g.,\n * \"src\", \"href\" will cause an exception. This is intended to be used as the\n * safe alterantive of `Element#setAttribute`, when applications need to set\n * attributes that do not have security implications and do not have a\n * corresponding DOM property.\n */\nexport function buildPrefixedAttributeSetter(prefix, ...otherPrefixes) {\n    const prefixes = [prefix, ...otherPrefixes];\n    return (e, attr, value) => {\n        setPrefixedAttribute(prefixes, e, attr, value);\n    };\n}\n/**\n * The safe alternative to Element#setAttribute. The function takes a list of\n * `SafeAttributePrefix`, making developer intention explicit. The attribute\n * to be set must has one of the safe prefixes, otherwise the function throws\n * an Error.\n */\nexport function setPrefixedAttribute(attrPrefixes, e, attr, value) {\n    if (attrPrefixes.length === 0) {\n        let message = '';\n        if (process.env.NODE_ENV !== 'production') {\n            message = 'No prefixes are provided';\n        }\n        throw new Error(message);\n    }\n    const prefixes = attrPrefixes.map((s) => unwrapAttributePrefix(s));\n    const attrLower = attr.toLowerCase();\n    if (prefixes.every((p) => attrLower.indexOf(p) !== 0)) {\n        throw new Error(`Attribute \"${attr}\" does not match any of the allowed prefixes.`);\n    }\n    e.setAttribute(attr, value);\n}\nfunction throwIfScriptOrStyle(element) {\n    let message = '';\n    const tagName = element.tagName;\n    if (tagName === 'SCRIPT' || tagName === 'STYLE') {\n        if (process.env.NODE_ENV !== 'production') {\n            if (tagName === 'SCRIPT') {\n                message = 'Use safeScriptEl.setTextContent with a SafeScript.';\n            }\n            else {\n                message = 'Use safeStyleEl.setTextContent with a SafeStyleSheet.';\n            }\n        }\n        throw new Error(message);\n    }\n}\nfunction isElement(elOrRoot) {\n    return elOrRoot.nodeType === 1; // Node.ELEMENT_NODE\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}