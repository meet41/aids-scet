{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev.js';\nimport { createHtmlInternal, unwrapHtml } from '../internals/html_impl.js';\nimport { assertIsTemplateObject } from '../internals/string_literal.js';\n/**\n * Creates a DocumentFragment object from a template literal (without any\n * embedded expressions) using the document context (HTML).\n *\n * Note: use svgFragment instead to create a DocumentFragment belonging to the\n * SVG namespace.\n *\n * This function is a template literal tag function. It should be called with\n * a template literal that does not contain any expressions. For example,\n *                           htmlFragment`foo`;\n *\n * @param templateObj This contains the literal part of the template literal.\n */\nexport function htmlFragment(templateObj) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertIsTemplateObject(templateObj, 0);\n  }\n  const range = document.createRange();\n  return range.createContextualFragment(unwrapHtml(createHtmlInternal(templateObj[0])));\n}\n/**\n * Creates a DocumentFragment object from a template literal (without any\n * embedded expressions), with an SVG context.\n *\n * This function is a template literal tag function. It should be called with\n * a template literal that does not contain any expressions. For example,\n *                           svgFragment`foo`;\n *\n * @param templateObj This contains the literal part of the template literal.\n */\nexport function svgFragment(templateObj) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertIsTemplateObject(templateObj, 0);\n  }\n  const svgElem = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  const range = document.createRange();\n  range.selectNodeContents(svgElem);\n  return range.createContextualFragment(unwrapHtml(createHtmlInternal(templateObj[0])));\n}\n/** Converts HTML markup into a node. */\nexport function htmlToNode(html) {\n  const range = document.createRange();\n  const fragment = range.createContextualFragment(unwrapHtml(html));\n  if (fragment.childNodes.length === 1) {\n    return fragment.childNodes[0];\n  } else {\n    return fragment;\n  }\n}","map":{"version":3,"names":["createHtmlInternal","unwrapHtml","assertIsTemplateObject","htmlFragment","templateObj","process","env","NODE_ENV","range","document","createRange","createContextualFragment","svgFragment","svgElem","createElementNS","selectNodeContents","htmlToNode","html","fragment","childNodes","length"],"sources":["E:/HTML/Udemy_Full Stack Web/AI-SCET Website/aiscet/node_modules/safevalues/dist/mjs/builders/document_fragment_builders.js"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev.js';\nimport { createHtmlInternal, unwrapHtml, } from '../internals/html_impl.js';\nimport { assertIsTemplateObject } from '../internals/string_literal.js';\n/**\n * Creates a DocumentFragment object from a template literal (without any\n * embedded expressions) using the document context (HTML).\n *\n * Note: use svgFragment instead to create a DocumentFragment belonging to the\n * SVG namespace.\n *\n * This function is a template literal tag function. It should be called with\n * a template literal that does not contain any expressions. For example,\n *                           htmlFragment`foo`;\n *\n * @param templateObj This contains the literal part of the template literal.\n */\nexport function htmlFragment(templateObj) {\n    if (process.env.NODE_ENV !== 'production') {\n        assertIsTemplateObject(templateObj, 0);\n    }\n    const range = document.createRange();\n    return range.createContextualFragment(unwrapHtml(createHtmlInternal(templateObj[0])));\n}\n/**\n * Creates a DocumentFragment object from a template literal (without any\n * embedded expressions), with an SVG context.\n *\n * This function is a template literal tag function. It should be called with\n * a template literal that does not contain any expressions. For example,\n *                           svgFragment`foo`;\n *\n * @param templateObj This contains the literal part of the template literal.\n */\nexport function svgFragment(templateObj) {\n    if (process.env.NODE_ENV !== 'production') {\n        assertIsTemplateObject(templateObj, 0);\n    }\n    const svgElem = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    const range = document.createRange();\n    range.selectNodeContents(svgElem);\n    return range.createContextualFragment(unwrapHtml(createHtmlInternal(templateObj[0])));\n}\n/** Converts HTML markup into a node. */\nexport function htmlToNode(html) {\n    const range = document.createRange();\n    const fragment = range.createContextualFragment(unwrapHtml(html));\n    if (fragment.childNodes.length === 1) {\n        return fragment.childNodes[0];\n    }\n    else {\n        return fragment;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,uBAAuB;AAC9B,SAASA,kBAAkB,EAAEC,UAAU,QAAS,2BAA2B;AAC3E,SAASC,sBAAsB,QAAQ,gCAAgC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,WAAW,EAAE;EACtC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACvCL,sBAAsB,CAACE,WAAW,EAAE,CAAC,CAAC;EAC1C;EACA,MAAMI,KAAK,GAAGC,QAAQ,CAACC,WAAW,CAAC,CAAC;EACpC,OAAOF,KAAK,CAACG,wBAAwB,CAACV,UAAU,CAACD,kBAAkB,CAACI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,WAAWA,CAACR,WAAW,EAAE;EACrC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACvCL,sBAAsB,CAACE,WAAW,EAAE,CAAC,CAAC;EAC1C;EACA,MAAMS,OAAO,GAAGJ,QAAQ,CAACK,eAAe,CAAC,4BAA4B,EAAE,KAAK,CAAC;EAC7E,MAAMN,KAAK,GAAGC,QAAQ,CAACC,WAAW,CAAC,CAAC;EACpCF,KAAK,CAACO,kBAAkB,CAACF,OAAO,CAAC;EACjC,OAAOL,KAAK,CAACG,wBAAwB,CAACV,UAAU,CAACD,kBAAkB,CAACI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzF;AACA;AACA,OAAO,SAASY,UAAUA,CAACC,IAAI,EAAE;EAC7B,MAAMT,KAAK,GAAGC,QAAQ,CAACC,WAAW,CAAC,CAAC;EACpC,MAAMQ,QAAQ,GAAGV,KAAK,CAACG,wBAAwB,CAACV,UAAU,CAACgB,IAAI,CAAC,CAAC;EACjE,IAAIC,QAAQ,CAACC,UAAU,CAACC,MAAM,KAAK,CAAC,EAAE;IAClC,OAAOF,QAAQ,CAACC,UAAU,CAAC,CAAC,CAAC;EACjC,CAAC,MACI;IACD,OAAOD,QAAQ;EACnB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}