{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { unwrapUrlOrSanitize } from '../../builders/url_builders.js';\nimport { isResourceUrl, unwrapResourceUrl } from '../../internals/resource_url_impl.js';\nconst SAFE_URL_REL_VALUES = ['alternate', 'author', 'bookmark', 'canonical', 'cite', 'help', 'icon', 'license', 'modulepreload', 'next', 'prefetch', 'dns-prefetch', 'prerender', 'preconnect', 'preload', 'prev', 'search', 'subresource'];\nexport function setHrefAndRel(link, url, rel) {\n  if (isResourceUrl(url)) {\n    setHrefAndRelWithTrustedResourceUrl(link, url, rel);\n    return;\n  } else {\n    if (SAFE_URL_REL_VALUES.indexOf(rel) === -1) {\n      throw new Error(`TrustedResourceUrl href attribute required with rel=\"${rel}\"`);\n    }\n    const sanitizedUrl = unwrapUrlOrSanitize(url);\n    if (sanitizedUrl === undefined) {\n      return;\n    }\n    link.href = sanitizedUrl;\n  }\n  link.rel = rel;\n}\n/**\n * Safely sets a link element's \"href\" property using a TrustedResourceUrl and\n * an arbitrary \"rel\" value. It is recommended to use this method when the url\n * is always a TrustedResourceUrl, since the resulting binary size will be\n * smaller.\n */\nexport function setHrefAndRelWithTrustedResourceUrl(link, url, rel) {\n  link.href = unwrapResourceUrl(url).toString();\n  link.rel = rel;\n}","map":{"version":3,"names":["unwrapUrlOrSanitize","isResourceUrl","unwrapResourceUrl","SAFE_URL_REL_VALUES","setHrefAndRel","link","url","rel","setHrefAndRelWithTrustedResourceUrl","indexOf","Error","sanitizedUrl","undefined","href","toString"],"sources":["E:/HTML/Udemy_Full Stack Web/AI-SCET Website/aiscet/node_modules/safevalues/dist/mjs/dom/elements/link.js"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { unwrapUrlOrSanitize } from '../../builders/url_builders.js';\nimport { isResourceUrl, unwrapResourceUrl, } from '../../internals/resource_url_impl.js';\nconst SAFE_URL_REL_VALUES = [\n    'alternate',\n    'author',\n    'bookmark',\n    'canonical',\n    'cite',\n    'help',\n    'icon',\n    'license',\n    'modulepreload',\n    'next',\n    'prefetch',\n    'dns-prefetch',\n    'prerender',\n    'preconnect',\n    'preload',\n    'prev',\n    'search',\n    'subresource',\n];\nexport function setHrefAndRel(link, url, rel) {\n    if (isResourceUrl(url)) {\n        setHrefAndRelWithTrustedResourceUrl(link, url, rel);\n        return;\n    }\n    else {\n        if (SAFE_URL_REL_VALUES.indexOf(rel) === -1) {\n            throw new Error(`TrustedResourceUrl href attribute required with rel=\"${rel}\"`);\n        }\n        const sanitizedUrl = unwrapUrlOrSanitize(url);\n        if (sanitizedUrl === undefined) {\n            return;\n        }\n        link.href = sanitizedUrl;\n    }\n    link.rel = rel;\n}\n/**\n * Safely sets a link element's \"href\" property using a TrustedResourceUrl and\n * an arbitrary \"rel\" value. It is recommended to use this method when the url\n * is always a TrustedResourceUrl, since the resulting binary size will be\n * smaller.\n */\nexport function setHrefAndRelWithTrustedResourceUrl(link, url, rel) {\n    link.href = unwrapResourceUrl(url).toString();\n    link.rel = rel;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,mBAAmB,QAAQ,gCAAgC;AACpE,SAASC,aAAa,EAAEC,iBAAiB,QAAS,sCAAsC;AACxF,MAAMC,mBAAmB,GAAG,CACxB,WAAW,EACX,QAAQ,EACR,UAAU,EACV,WAAW,EACX,MAAM,EACN,MAAM,EACN,MAAM,EACN,SAAS,EACT,eAAe,EACf,MAAM,EACN,UAAU,EACV,cAAc,EACd,WAAW,EACX,YAAY,EACZ,SAAS,EACT,MAAM,EACN,QAAQ,EACR,aAAa,CAChB;AACD,OAAO,SAASC,aAAaA,CAACC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAE;EAC1C,IAAIN,aAAa,CAACK,GAAG,CAAC,EAAE;IACpBE,mCAAmC,CAACH,IAAI,EAAEC,GAAG,EAAEC,GAAG,CAAC;IACnD;EACJ,CAAC,MACI;IACD,IAAIJ,mBAAmB,CAACM,OAAO,CAACF,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MACzC,MAAM,IAAIG,KAAK,CAAC,wDAAwDH,GAAG,GAAG,CAAC;IACnF;IACA,MAAMI,YAAY,GAAGX,mBAAmB,CAACM,GAAG,CAAC;IAC7C,IAAIK,YAAY,KAAKC,SAAS,EAAE;MAC5B;IACJ;IACAP,IAAI,CAACQ,IAAI,GAAGF,YAAY;EAC5B;EACAN,IAAI,CAACE,GAAG,GAAGA,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,mCAAmCA,CAACH,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAE;EAChEF,IAAI,CAACQ,IAAI,GAAGX,iBAAiB,CAACI,GAAG,CAAC,CAACQ,QAAQ,CAAC,CAAC;EAC7CT,IAAI,CAACE,GAAG,GAAGA,GAAG;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}