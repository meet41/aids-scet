{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * The name of the Trusted Types policy used by TS safevalues, or empty\n * to disable Trusted Types. This duplicates the 'google#safe', but\n * can be overridden in tests.\n */\nlet trustedTypesPolicyName = 'google#safe';\n/** Helper to retrieve the value of `window.trustedTypes`. */\nfunction trustedTypes() {\n  if (typeof window !== 'undefined') {\n    return window.trustedTypes;\n  }\n  return undefined;\n}\n/**\n * Returns window.trustedTypes if Trusted Types are enabled and supported, or\n * null otherwise.\n */\nexport function getTrustedTypes() {\n  var _a;\n  return trustedTypesPolicyName !== '' ? (_a = trustedTypes()) !== null && _a !== void 0 ? _a : null : null;\n}\n/**\n * The Trusted Types policy used by TS safevalues, or null if Trusted Types\n * are not enabled/supported, or undefined if the policy has not been created\n * yet.\n */\nlet trustedTypesPolicy;\n/**\n * Returns the Trusted Types policy used by TS safevalues, or null if Trusted\n * Types are not enabled/supported. The first call to this function will\n * create the policy.\n */\nexport function getTrustedTypesPolicy() {\n  var _a, _b;\n  if (trustedTypesPolicy === undefined) {\n    try {\n      trustedTypesPolicy = (_b = (_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.createPolicy(trustedTypesPolicyName, {\n        createHTML: s => s,\n        createScript: s => s,\n        createScriptURL: s => s\n      })) !== null && _b !== void 0 ? _b : null;\n    } catch (_c) {\n      // In Chromium versions before 81, trustedTypes.createPolicy throws if\n      // called with a name that is already registered, even if no CSP is set.\n      // Until users have largely migrated to 81 or above, catch the error not\n      // to break the applications functionally. In such case, the code will\n      // fall back to using regular Safe Types.\n      trustedTypesPolicy = null;\n    }\n  }\n  return trustedTypesPolicy;\n}\n/** Helpers for tests. */\nexport const TEST_ONLY = {\n  resetDefaults() {\n    trustedTypesPolicy = undefined;\n    trustedTypesPolicyName = 'google#safe';\n  },\n  setTrustedTypesPolicyName(name) {\n    trustedTypesPolicyName = name;\n  }\n};","map":{"version":3,"names":["trustedTypesPolicyName","trustedTypes","window","undefined","getTrustedTypes","_a","trustedTypesPolicy","getTrustedTypesPolicy","_b","createPolicy","createHTML","s","createScript","createScriptURL","_c","TEST_ONLY","resetDefaults","setTrustedTypesPolicyName","name"],"sources":["E:/HTML/Udemy_Full Stack Web/AI-SCET Website/aiscet/node_modules/safevalues/dist/mjs/internals/trusted_types.js"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * The name of the Trusted Types policy used by TS safevalues, or empty\n * to disable Trusted Types. This duplicates the 'google#safe', but\n * can be overridden in tests.\n */\nlet trustedTypesPolicyName = 'google#safe';\n/** Helper to retrieve the value of `window.trustedTypes`. */\nfunction trustedTypes() {\n    if (typeof window !== 'undefined') {\n        return window.trustedTypes;\n    }\n    return undefined;\n}\n/**\n * Returns window.trustedTypes if Trusted Types are enabled and supported, or\n * null otherwise.\n */\nexport function getTrustedTypes() {\n    var _a;\n    return trustedTypesPolicyName !== '' ? (_a = trustedTypes()) !== null && _a !== void 0 ? _a : null : null;\n}\n/**\n * The Trusted Types policy used by TS safevalues, or null if Trusted Types\n * are not enabled/supported, or undefined if the policy has not been created\n * yet.\n */\nlet trustedTypesPolicy;\n/**\n * Returns the Trusted Types policy used by TS safevalues, or null if Trusted\n * Types are not enabled/supported. The first call to this function will\n * create the policy.\n */\nexport function getTrustedTypesPolicy() {\n    var _a, _b;\n    if (trustedTypesPolicy === undefined) {\n        try {\n            trustedTypesPolicy =\n                (_b = (_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.createPolicy(trustedTypesPolicyName, {\n                    createHTML: (s) => s,\n                    createScript: (s) => s,\n                    createScriptURL: (s) => s,\n                })) !== null && _b !== void 0 ? _b : null;\n        }\n        catch (_c) {\n            // In Chromium versions before 81, trustedTypes.createPolicy throws if\n            // called with a name that is already registered, even if no CSP is set.\n            // Until users have largely migrated to 81 or above, catch the error not\n            // to break the applications functionally. In such case, the code will\n            // fall back to using regular Safe Types.\n            trustedTypesPolicy = null;\n        }\n    }\n    return trustedTypesPolicy;\n}\n/** Helpers for tests. */\nexport const TEST_ONLY = {\n    resetDefaults() {\n        trustedTypesPolicy = undefined;\n        trustedTypesPolicyName = 'google#safe';\n    },\n    setTrustedTypesPolicyName(name) {\n        trustedTypesPolicyName = name;\n    },\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,sBAAsB,GAAG,aAAa;AAC1C;AACA,SAASC,YAAYA,CAAA,EAAG;EACpB,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IAC/B,OAAOA,MAAM,CAACD,YAAY;EAC9B;EACA,OAAOE,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAAA,EAAG;EAC9B,IAAIC,EAAE;EACN,OAAOL,sBAAsB,KAAK,EAAE,GAAG,CAACK,EAAE,GAAGJ,YAAY,CAAC,CAAC,MAAM,IAAI,IAAII,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI,GAAG,IAAI;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,kBAAkB;AACtB;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqBA,CAAA,EAAG;EACpC,IAAIF,EAAE,EAAEG,EAAE;EACV,IAAIF,kBAAkB,KAAKH,SAAS,EAAE;IAClC,IAAI;MACAG,kBAAkB,GACd,CAACE,EAAE,GAAG,CAACH,EAAE,GAAGD,eAAe,CAAC,CAAC,MAAM,IAAI,IAAIC,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACI,YAAY,CAACT,sBAAsB,EAAE;QACxGU,UAAU,EAAGC,CAAC,IAAKA,CAAC;QACpBC,YAAY,EAAGD,CAAC,IAAKA,CAAC;QACtBE,eAAe,EAAGF,CAAC,IAAKA;MAC5B,CAAC,CAAC,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI;IACjD,CAAC,CACD,OAAOM,EAAE,EAAE;MACP;MACA;MACA;MACA;MACA;MACAR,kBAAkB,GAAG,IAAI;IAC7B;EACJ;EACA,OAAOA,kBAAkB;AAC7B;AACA;AACA,OAAO,MAAMS,SAAS,GAAG;EACrBC,aAAaA,CAAA,EAAG;IACZV,kBAAkB,GAAGH,SAAS;IAC9BH,sBAAsB,GAAG,aAAa;EAC1C,CAAC;EACDiB,yBAAyBA,CAACC,IAAI,EAAE;IAC5BlB,sBAAsB,GAAGkB,IAAI;EACjC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}