{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { secretToken } from '../../internals/secrets.js';\nimport { HtmlSanitizerImpl } from './html_sanitizer.js';\nimport { DEFAULT_SANITIZER_TABLE } from './sanitizer_table/default_sanitizer_table.js';\nimport { AttributePolicyAction, SanitizerTable, isCustomElement } from './sanitizer_table/sanitizer_table.js';\n/** This class allows modifications to the default sanitizer configuration. */\nexport class HtmlSanitizerBuilder {\n  constructor() {\n    // To denote if the builder has called build() and therefore should make no\n    // further changes to the sanitizer table.\n    this.calledBuild = false;\n    this.sanitizerTable = DEFAULT_SANITIZER_TABLE;\n  }\n  /** Builder option to restrict allowed elements to a smaller subset. */\n  onlyAllowElements(elementSet) {\n    const allowedElements = new Set();\n    const allowedElementPolicies = new Map();\n    for (let element of elementSet) {\n      element = element.toUpperCase();\n      if (!this.sanitizerTable.isAllowedElement(element)) {\n        throw new Error(`Element: ${element}, is not allowed by html5_contract.textpb`);\n      }\n      const elementPolicy = this.sanitizerTable.elementPolicies.get(element);\n      if (elementPolicy !== undefined) {\n        allowedElementPolicies.set(element, elementPolicy);\n      } else {\n        allowedElements.add(element);\n      }\n    }\n    this.sanitizerTable = new SanitizerTable(allowedElements, allowedElementPolicies, this.sanitizerTable.allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);\n    return this;\n  }\n  /**\n   * Builder option to allow a set of custom elements. Must be called either\n   * without or after `onlyAllowElements` - will be overwritten otherwise.\n   * Custom elements must contain a dash.\n   */\n  allowCustomElement(element, allowedAttributes) {\n    const allowedElements = new Set(this.sanitizerTable.allowedElements);\n    const allowedElementPolicies = new Map(this.sanitizerTable.elementPolicies);\n    element = element.toUpperCase();\n    if (!isCustomElement(element)) {\n      throw new Error(`Element: ${element} is not a custom element`);\n    }\n    if (allowedAttributes) {\n      const elementPolicy = new Map();\n      for (const attribute of allowedAttributes) {\n        elementPolicy.set(attribute, {\n          policyAction: AttributePolicyAction.KEEP\n        });\n      }\n      allowedElementPolicies.set(element, elementPolicy);\n    } else {\n      allowedElements.add(element);\n    }\n    this.sanitizerTable = new SanitizerTable(allowedElements, allowedElementPolicies, this.sanitizerTable.allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);\n    return this;\n  }\n  /**\n   * Builder option to restrict allowed attributes to a smaller subset.\n   *\n   * If the attribute isn't currently allowed then it won't be added.\n   */\n  onlyAllowAttributes(attributeSet) {\n    const allowedGlobalAttributes = new Set();\n    const globalAttributePolicies = new Map();\n    const elementPolicies = new Map();\n    for (const attribute of attributeSet) {\n      if (this.sanitizerTable.allowedGlobalAttributes.has(attribute)) {\n        allowedGlobalAttributes.add(attribute);\n      }\n      if (this.sanitizerTable.globalAttributePolicies.has(attribute)) {\n        globalAttributePolicies.set(attribute, this.sanitizerTable.globalAttributePolicies.get(attribute));\n      }\n    }\n    for (const [elementName, originalElementPolicy] of this.sanitizerTable.elementPolicies.entries()) {\n      const newElementPolicy = new Map();\n      for (const [attribute, attributePolicy] of originalElementPolicy.entries()) {\n        if (attributeSet.has(attribute)) {\n          newElementPolicy.set(attribute, attributePolicy);\n        }\n      }\n      elementPolicies.set(elementName, newElementPolicy);\n    }\n    this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, elementPolicies, allowedGlobalAttributes, globalAttributePolicies);\n    return this;\n  }\n  /**\n   * Allows the set of data attributes passed.\n   *\n   * These values must be prefixed with \"data-\"\n   *\n   * If called with onlyAllowElements or onlyAllowAttributes, those methods must\n   * be called first.\n   */\n  allowDataAttributes(attributes) {\n    const allowedGlobalAttributes = new Set(this.sanitizerTable.allowedGlobalAttributes);\n    for (const attribute of attributes) {\n      if (attribute.indexOf('data-') !== 0) {\n        throw new Error(`data attribute: ${attribute} does not begin with the prefix \"data-\"`);\n      }\n      allowedGlobalAttributes.add(attribute);\n    }\n    this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);\n    return this;\n  }\n  /**\n   * Preserves style attributes. Note that the sanitizer won't parse and\n   * sanitize the values but keep them as they are. In particular this means\n   * that the code will be able to call functions that could do undesirable\n   * things (e.g. `url` to trigger a network request), as well as any custom\n   * properties or functions defined by the application.\n   */\n  allowStyleAttributes() {\n    const globalAttributePolicies = new Map(this.sanitizerTable.globalAttributePolicies);\n    globalAttributePolicies.set('style', {\n      policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_STYLE\n    });\n    this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, this.sanitizerTable.allowedGlobalAttributes, globalAttributePolicies);\n    return this;\n  }\n  /**\n   * Preserves the class attribute on all elements. This means contents can\n   * adopt CSS styles from other page elements and possibly mask themselves as\n   * legitimate UI elements, which can lead to phishing.\n   */\n  allowClassAttributes() {\n    const allowedGlobalAttributes = new Set(this.sanitizerTable.allowedGlobalAttributes);\n    allowedGlobalAttributes.add('class');\n    this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);\n    return this;\n  }\n  /**\n   * Preserves id attributes. This carries moderate risk as it allows an\n   * element to override other elements with the same ID.\n   */\n  allowIdAttributes() {\n    const allowedGlobalAttributes = new Set(this.sanitizerTable.allowedGlobalAttributes);\n    allowedGlobalAttributes.add('id');\n    this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);\n    return this;\n  }\n  /**\n   * Preserves (some) attributes that reference existing ids. This carries a\n   * moderate security risk, because sanitized content can create semantic\n   * associations with existing elements in the page, regardless of the layout.\n   * This could be used to override the label associated with a form input by a\n   * screen reader, and facilitate phishing.\n   */\n  allowIdReferenceAttributes() {\n    const allowedGlobalAttributes = new Set(this.sanitizerTable.allowedGlobalAttributes);\n    // TODO(b/190693339): Generate this subtable from the contract.\n    allowedGlobalAttributes.add('aria-activedescendant').add('aria-controls').add('aria-labelledby').add('aria-owns').add('for').add('list');\n    this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);\n    return this;\n  }\n  /**\n   * Sets the ResourceUrlPolicy to be used by the sanitizer.\n   *\n   * The ResourceUrlPolicy can be used to decide whether a given URL is allowed\n   * to be loaded as an external resource. It is a function that an instance\n   * of `URL` and a set of hints giving a context on why an image was loaded.\n   *\n   * The policy can return `null` to indicate that the resource should be\n   * dropped, otherwise it should return a valid `URL` that will be used to\n   * replace the original URL in the sanitized output.\n   *\n   * For example the following policy will allow all images loaded from\n   * `https://google.com` but will drop all images loaded from\n   * `https://forbidden.google.com`.\n   *\n   * ```typescript\n   * const resourceUrlPolicy: ResourceUrlPolicy = (url) => {\n   *   if (url.hostname === 'forbidden.google.com') {\n   *     return null;\n   *   }\n   *   return url;\n   * };\n   * ```\n   *\n   * You can also use the `ResourceUrlPolicyHints` to make the policy more\n   * informed. For example the following policy will only allow images loaded\n   * via a <img src> tag but will drop all other images.\n   *\n   * ```typescript\n   * const resourceUrlPolicy: ResourceUrlPolicy = (url, hints) => {\n   *   if (hints.type === ResourceUrlPolicyHintsType.HTML_ATTRIBUTE &&\n   *       hints.attributeName === 'src' &&\n   *       hints.tagName === 'IMG') {\n   *     return url;\n   *   }\n   *   return null;\n   * };\n   * ```\n   */\n  withResourceUrlPolicy(resourceUrlPolicy) {\n    this.resourceUrlPolicy = resourceUrlPolicy;\n    return this;\n  }\n  build() {\n    if (this.calledBuild) {\n      throw new Error('this sanitizer has already called build');\n    }\n    this.calledBuild = true;\n    return new HtmlSanitizerImpl(this.sanitizerTable, secretToken, undefined,\n    // TODO(securitymb): Add a style element sanitizer.\n    undefined,\n    // TODO(securitymb): Add a style attribute sanitizer.\n    this.resourceUrlPolicy);\n  }\n}","map":{"version":3,"names":["secretToken","HtmlSanitizerImpl","DEFAULT_SANITIZER_TABLE","AttributePolicyAction","SanitizerTable","isCustomElement","HtmlSanitizerBuilder","constructor","calledBuild","sanitizerTable","onlyAllowElements","elementSet","allowedElements","Set","allowedElementPolicies","Map","element","toUpperCase","isAllowedElement","Error","elementPolicy","elementPolicies","get","undefined","set","add","allowedGlobalAttributes","globalAttributePolicies","allowCustomElement","allowedAttributes","attribute","policyAction","KEEP","onlyAllowAttributes","attributeSet","has","elementName","originalElementPolicy","entries","newElementPolicy","attributePolicy","allowDataAttributes","attributes","indexOf","allowStyleAttributes","KEEP_AND_SANITIZE_STYLE","allowClassAttributes","allowIdAttributes","allowIdReferenceAttributes","withResourceUrlPolicy","resourceUrlPolicy","build"],"sources":["E:/HTML/Udemy_Full Stack Web/AI-SCET Website/aiscet/node_modules/safevalues/dist/mjs/builders/html_sanitizer/html_sanitizer_builder.js"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { secretToken } from '../../internals/secrets.js';\nimport { HtmlSanitizerImpl } from './html_sanitizer.js';\nimport { DEFAULT_SANITIZER_TABLE } from './sanitizer_table/default_sanitizer_table.js';\nimport { AttributePolicyAction, SanitizerTable, isCustomElement, } from './sanitizer_table/sanitizer_table.js';\n/** This class allows modifications to the default sanitizer configuration. */\nexport class HtmlSanitizerBuilder {\n    constructor() {\n        // To denote if the builder has called build() and therefore should make no\n        // further changes to the sanitizer table.\n        this.calledBuild = false;\n        this.sanitizerTable = DEFAULT_SANITIZER_TABLE;\n    }\n    /** Builder option to restrict allowed elements to a smaller subset. */\n    onlyAllowElements(elementSet) {\n        const allowedElements = new Set();\n        const allowedElementPolicies = new Map();\n        for (let element of elementSet) {\n            element = element.toUpperCase();\n            if (!this.sanitizerTable.isAllowedElement(element)) {\n                throw new Error(`Element: ${element}, is not allowed by html5_contract.textpb`);\n            }\n            const elementPolicy = this.sanitizerTable.elementPolicies.get(element);\n            if (elementPolicy !== undefined) {\n                allowedElementPolicies.set(element, elementPolicy);\n            }\n            else {\n                allowedElements.add(element);\n            }\n        }\n        this.sanitizerTable = new SanitizerTable(allowedElements, allowedElementPolicies, this.sanitizerTable.allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);\n        return this;\n    }\n    /**\n     * Builder option to allow a set of custom elements. Must be called either\n     * without or after `onlyAllowElements` - will be overwritten otherwise.\n     * Custom elements must contain a dash.\n     */\n    allowCustomElement(element, allowedAttributes) {\n        const allowedElements = new Set(this.sanitizerTable.allowedElements);\n        const allowedElementPolicies = new Map(this.sanitizerTable.elementPolicies);\n        element = element.toUpperCase();\n        if (!isCustomElement(element)) {\n            throw new Error(`Element: ${element} is not a custom element`);\n        }\n        if (allowedAttributes) {\n            const elementPolicy = new Map();\n            for (const attribute of allowedAttributes) {\n                elementPolicy.set(attribute, {\n                    policyAction: AttributePolicyAction.KEEP,\n                });\n            }\n            allowedElementPolicies.set(element, elementPolicy);\n        }\n        else {\n            allowedElements.add(element);\n        }\n        this.sanitizerTable = new SanitizerTable(allowedElements, allowedElementPolicies, this.sanitizerTable.allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);\n        return this;\n    }\n    /**\n     * Builder option to restrict allowed attributes to a smaller subset.\n     *\n     * If the attribute isn't currently allowed then it won't be added.\n     */\n    onlyAllowAttributes(attributeSet) {\n        const allowedGlobalAttributes = new Set();\n        const globalAttributePolicies = new Map();\n        const elementPolicies = new Map();\n        for (const attribute of attributeSet) {\n            if (this.sanitizerTable.allowedGlobalAttributes.has(attribute)) {\n                allowedGlobalAttributes.add(attribute);\n            }\n            if (this.sanitizerTable.globalAttributePolicies.has(attribute)) {\n                globalAttributePolicies.set(attribute, this.sanitizerTable.globalAttributePolicies.get(attribute));\n            }\n        }\n        for (const [elementName, originalElementPolicy,] of this.sanitizerTable.elementPolicies.entries()) {\n            const newElementPolicy = new Map();\n            for (const [attribute, attributePolicy,] of originalElementPolicy.entries()) {\n                if (attributeSet.has(attribute)) {\n                    newElementPolicy.set(attribute, attributePolicy);\n                }\n            }\n            elementPolicies.set(elementName, newElementPolicy);\n        }\n        this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, elementPolicies, allowedGlobalAttributes, globalAttributePolicies);\n        return this;\n    }\n    /**\n     * Allows the set of data attributes passed.\n     *\n     * These values must be prefixed with \"data-\"\n     *\n     * If called with onlyAllowElements or onlyAllowAttributes, those methods must\n     * be called first.\n     */\n    allowDataAttributes(attributes) {\n        const allowedGlobalAttributes = new Set(this.sanitizerTable.allowedGlobalAttributes);\n        for (const attribute of attributes) {\n            if (attribute.indexOf('data-') !== 0) {\n                throw new Error(`data attribute: ${attribute} does not begin with the prefix \"data-\"`);\n            }\n            allowedGlobalAttributes.add(attribute);\n        }\n        this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);\n        return this;\n    }\n    /**\n     * Preserves style attributes. Note that the sanitizer won't parse and\n     * sanitize the values but keep them as they are. In particular this means\n     * that the code will be able to call functions that could do undesirable\n     * things (e.g. `url` to trigger a network request), as well as any custom\n     * properties or functions defined by the application.\n     */\n    allowStyleAttributes() {\n        const globalAttributePolicies = new Map(this.sanitizerTable.globalAttributePolicies);\n        globalAttributePolicies.set('style', {\n            policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_STYLE,\n        });\n        this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, this.sanitizerTable.allowedGlobalAttributes, globalAttributePolicies);\n        return this;\n    }\n    /**\n     * Preserves the class attribute on all elements. This means contents can\n     * adopt CSS styles from other page elements and possibly mask themselves as\n     * legitimate UI elements, which can lead to phishing.\n     */\n    allowClassAttributes() {\n        const allowedGlobalAttributes = new Set(this.sanitizerTable.allowedGlobalAttributes);\n        allowedGlobalAttributes.add('class');\n        this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);\n        return this;\n    }\n    /**\n     * Preserves id attributes. This carries moderate risk as it allows an\n     * element to override other elements with the same ID.\n     */\n    allowIdAttributes() {\n        const allowedGlobalAttributes = new Set(this.sanitizerTable.allowedGlobalAttributes);\n        allowedGlobalAttributes.add('id');\n        this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);\n        return this;\n    }\n    /**\n     * Preserves (some) attributes that reference existing ids. This carries a\n     * moderate security risk, because sanitized content can create semantic\n     * associations with existing elements in the page, regardless of the layout.\n     * This could be used to override the label associated with a form input by a\n     * screen reader, and facilitate phishing.\n     */\n    allowIdReferenceAttributes() {\n        const allowedGlobalAttributes = new Set(this.sanitizerTable.allowedGlobalAttributes);\n        // TODO(b/190693339): Generate this subtable from the contract.\n        allowedGlobalAttributes\n            .add('aria-activedescendant')\n            .add('aria-controls')\n            .add('aria-labelledby')\n            .add('aria-owns')\n            .add('for')\n            .add('list');\n        this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);\n        return this;\n    }\n    /**\n     * Sets the ResourceUrlPolicy to be used by the sanitizer.\n     *\n     * The ResourceUrlPolicy can be used to decide whether a given URL is allowed\n     * to be loaded as an external resource. It is a function that an instance\n     * of `URL` and a set of hints giving a context on why an image was loaded.\n     *\n     * The policy can return `null` to indicate that the resource should be\n     * dropped, otherwise it should return a valid `URL` that will be used to\n     * replace the original URL in the sanitized output.\n     *\n     * For example the following policy will allow all images loaded from\n     * `https://google.com` but will drop all images loaded from\n     * `https://forbidden.google.com`.\n     *\n     * ```typescript\n     * const resourceUrlPolicy: ResourceUrlPolicy = (url) => {\n     *   if (url.hostname === 'forbidden.google.com') {\n     *     return null;\n     *   }\n     *   return url;\n     * };\n     * ```\n     *\n     * You can also use the `ResourceUrlPolicyHints` to make the policy more\n     * informed. For example the following policy will only allow images loaded\n     * via a <img src> tag but will drop all other images.\n     *\n     * ```typescript\n     * const resourceUrlPolicy: ResourceUrlPolicy = (url, hints) => {\n     *   if (hints.type === ResourceUrlPolicyHintsType.HTML_ATTRIBUTE &&\n     *       hints.attributeName === 'src' &&\n     *       hints.tagName === 'IMG') {\n     *     return url;\n     *   }\n     *   return null;\n     * };\n     * ```\n     */\n    withResourceUrlPolicy(resourceUrlPolicy) {\n        this.resourceUrlPolicy = resourceUrlPolicy;\n        return this;\n    }\n    build() {\n        if (this.calledBuild) {\n            throw new Error('this sanitizer has already called build');\n        }\n        this.calledBuild = true;\n        return new HtmlSanitizerImpl(this.sanitizerTable, secretToken, undefined, // TODO(securitymb): Add a style element sanitizer.\n        undefined, // TODO(securitymb): Add a style attribute sanitizer.\n        this.resourceUrlPolicy);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}