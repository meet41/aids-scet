{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { createContextualFragment } from '../../dom/globals/range.js';\nimport '../../environment/dev.js';\nimport { createHtmlInternal } from '../../internals/html_impl.js';\n/**\n * Returns a fragment that contains the parsed HTML for `dirtyHtml` without\n * executing any of the potential payload.\n */\nexport function createInertFragment(dirtyHtml, inertDocument) {\n  if (process.env.NODE_ENV !== 'production') {\n    // We are checking if the function was accidentally called with non-inert\n    // document. One observable difference between live and inert documents\n    // is that live document has a `defaultView` equal to `window`, while\n    // inert document has a `defaultView` equal to `null`.\n    if (inertDocument.defaultView) {\n      throw new Error('createInertFragment called with non-inert document');\n    }\n  }\n  const range = inertDocument.createRange();\n  range.selectNode(inertDocument.body);\n  // This call is only used to create an inert tree for the sanitizer to\n  // further process and is never returned directly to the caller. We can't use\n  // a reviewed conversion in order to avoid an import loop.\n  const temporarySafeHtml = createHtmlInternal(dirtyHtml);\n  return createContextualFragment(range, temporarySafeHtml);\n}","map":{"version":3,"names":["createContextualFragment","createHtmlInternal","createInertFragment","dirtyHtml","inertDocument","process","env","NODE_ENV","defaultView","Error","range","createRange","selectNode","body","temporarySafeHtml"],"sources":["E:/HTML/Udemy_Full Stack Web/AI-SCET Website/aiscet/node_modules/safevalues/dist/mjs/builders/html_sanitizer/inert_fragment.js"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { createContextualFragment } from '../../dom/globals/range.js';\nimport '../../environment/dev.js';\nimport { createHtmlInternal } from '../../internals/html_impl.js';\n/**\n * Returns a fragment that contains the parsed HTML for `dirtyHtml` without\n * executing any of the potential payload.\n */\nexport function createInertFragment(dirtyHtml, inertDocument) {\n    if (process.env.NODE_ENV !== 'production') {\n        // We are checking if the function was accidentally called with non-inert\n        // document. One observable difference between live and inert documents\n        // is that live document has a `defaultView` equal to `window`, while\n        // inert document has a `defaultView` equal to `null`.\n        if (inertDocument.defaultView) {\n            throw new Error('createInertFragment called with non-inert document');\n        }\n    }\n    const range = inertDocument.createRange();\n    range.selectNode(inertDocument.body);\n    // This call is only used to create an inert tree for the sanitizer to\n    // further process and is never returned directly to the caller. We can't use\n    // a reviewed conversion in order to avoid an import loop.\n    const temporarySafeHtml = createHtmlInternal(dirtyHtml);\n    return createContextualFragment(range, temporarySafeHtml);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,wBAAwB,QAAQ,4BAA4B;AACrE,OAAO,0BAA0B;AACjC,SAASC,kBAAkB,QAAQ,8BAA8B;AACjE;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAmBA,CAACC,SAAS,EAAEC,aAAa,EAAE;EAC1D,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACvC;IACA;IACA;IACA;IACA,IAAIH,aAAa,CAACI,WAAW,EAAE;MAC3B,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;IACzE;EACJ;EACA,MAAMC,KAAK,GAAGN,aAAa,CAACO,WAAW,CAAC,CAAC;EACzCD,KAAK,CAACE,UAAU,CAACR,aAAa,CAACS,IAAI,CAAC;EACpC;EACA;EACA;EACA,MAAMC,iBAAiB,GAAGb,kBAAkB,CAACE,SAAS,CAAC;EACvD,OAAOH,wBAAwB,CAACU,KAAK,EAAEI,iBAAiB,CAAC;AAC7D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}