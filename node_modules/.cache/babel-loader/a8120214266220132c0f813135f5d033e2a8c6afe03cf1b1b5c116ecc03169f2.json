{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev.js';\nimport { createScriptInternal, unwrapScript } from '../internals/script_impl.js';\nimport { assertIsTemplateObject } from '../internals/string_literal.js';\n/**\n * Creates a SafeScript object from a template literal (without any embedded\n * expressions).\n *\n * This function is a template literal tag function. It should be called with\n * a template literal that does not contain any expressions. For example,\n *                           safeScript`foo`;\n *\n * @param templateObj This contains the literal part of the template literal.\n * @param emptyArgs Expressions that evaluate to the empty string to enable\n *     inline comments.\n */\nexport function safeScript(templateObj, ...emptyArgs) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (emptyArgs.some(a => a !== '')) {\n      throw new Error('safeScript only allows empty string expressions ' + 'to enable inline comments.');\n    }\n    assertIsTemplateObject(templateObj, emptyArgs.length);\n  }\n  return createScriptInternal(templateObj.join(''));\n}\n/** Creates a `SafeScript` value by concatenating multiple `SafeScript`s. */\nexport function concatScripts(scripts) {\n  return createScriptInternal(scripts.map(unwrapScript).join(''));\n}\n/**\n * Converts a serializable value into JSON that is safe to interpolate into a\n * script context. In particular it escapes < characters so that a value of\n * \"&lt/script>\" doesn't break out of the context.\n * @param value The value to serialize.\n */\nexport function valueAsScript(value) {\n  return createScriptInternal(JSON.stringify(value).replace(/</g, '\\\\u003C'));\n}\n/**\n * Creates a `SafeScript` object from a template literal (without any embedded\n * expressions) along with additional arguments that the script should have\n * access to. These arguments will be JSON-encoded and passed to the script as\n * a function call.\n * @example\n * ```ts\n * safeScriptWithArgs`function (name, props) {\n *  console.log(name + ' is ' + props.age);\n * }`('Bob', { 'age': 42 })\n * ```\n * would return a `SafeScript` that represents the following code:\n * ```js\n * (function (name, props) {\n *  console.log(name + ' is ' + props.age);\n * })(\"Bob\",{\"age\":42})\n * ```\n * @note Be careful when passing objects as arguments, as unquoted property\n * names may be changed during compilation.\n * @param templateObj This contains the literal part of the template literal.\n * @param emptyArgs Expressions that evaluate to the empty string to enable\n *     inline comments.\n */\nexport function safeScriptWithArgs(templateObj, ...emptyArgs) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (emptyArgs.some(a => a !== '')) {\n      throw new Error('safeScriptWithArgs only allows empty string expressions ' + 'to enable inline comments.');\n    }\n    assertIsTemplateObject(templateObj, emptyArgs.length);\n  }\n  return (...argValues) => {\n    const values = argValues.map(v => valueAsScript(v).toString());\n    return createScriptInternal(`(${templateObj.join('')})(${values.join(',')})`);\n  };\n}","map":{"version":3,"names":["createScriptInternal","unwrapScript","assertIsTemplateObject","safeScript","templateObj","emptyArgs","process","env","NODE_ENV","some","a","Error","length","join","concatScripts","scripts","map","valueAsScript","value","JSON","stringify","replace","safeScriptWithArgs","argValues","values","v","toString"],"sources":["E:/HTML/Udemy_Full Stack Web/AI-SCET Website/aiscet/node_modules/safevalues/dist/mjs/builders/script_builders.js"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev.js';\nimport { createScriptInternal, unwrapScript, } from '../internals/script_impl.js';\nimport { assertIsTemplateObject } from '../internals/string_literal.js';\n/**\n * Creates a SafeScript object from a template literal (without any embedded\n * expressions).\n *\n * This function is a template literal tag function. It should be called with\n * a template literal that does not contain any expressions. For example,\n *                           safeScript`foo`;\n *\n * @param templateObj This contains the literal part of the template literal.\n * @param emptyArgs Expressions that evaluate to the empty string to enable\n *     inline comments.\n */\nexport function safeScript(templateObj, ...emptyArgs) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (emptyArgs.some((a) => a !== '')) {\n            throw new Error('safeScript only allows empty string expressions ' +\n                'to enable inline comments.');\n        }\n        assertIsTemplateObject(templateObj, emptyArgs.length);\n    }\n    return createScriptInternal(templateObj.join(''));\n}\n/** Creates a `SafeScript` value by concatenating multiple `SafeScript`s. */\nexport function concatScripts(scripts) {\n    return createScriptInternal(scripts.map(unwrapScript).join(''));\n}\n/**\n * Converts a serializable value into JSON that is safe to interpolate into a\n * script context. In particular it escapes < characters so that a value of\n * \"&lt/script>\" doesn't break out of the context.\n * @param value The value to serialize.\n */\nexport function valueAsScript(value) {\n    return createScriptInternal(JSON.stringify(value).replace(/</g, '\\\\u003C'));\n}\n/**\n * Creates a `SafeScript` object from a template literal (without any embedded\n * expressions) along with additional arguments that the script should have\n * access to. These arguments will be JSON-encoded and passed to the script as\n * a function call.\n * @example\n * ```ts\n * safeScriptWithArgs`function (name, props) {\n *  console.log(name + ' is ' + props.age);\n * }`('Bob', { 'age': 42 })\n * ```\n * would return a `SafeScript` that represents the following code:\n * ```js\n * (function (name, props) {\n *  console.log(name + ' is ' + props.age);\n * })(\"Bob\",{\"age\":42})\n * ```\n * @note Be careful when passing objects as arguments, as unquoted property\n * names may be changed during compilation.\n * @param templateObj This contains the literal part of the template literal.\n * @param emptyArgs Expressions that evaluate to the empty string to enable\n *     inline comments.\n */\nexport function safeScriptWithArgs(templateObj, ...emptyArgs) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (emptyArgs.some((a) => a !== '')) {\n            throw new Error('safeScriptWithArgs only allows empty string expressions ' +\n                'to enable inline comments.');\n        }\n        assertIsTemplateObject(templateObj, emptyArgs.length);\n    }\n    return (...argValues) => {\n        const values = argValues.map((v) => valueAsScript(v).toString());\n        return createScriptInternal(`(${templateObj.join('')})(${values.join(',')})`);\n    };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,uBAAuB;AAC9B,SAASA,oBAAoB,EAAEC,YAAY,QAAS,6BAA6B;AACjF,SAASC,sBAAsB,QAAQ,gCAAgC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,WAAW,EAAE,GAAGC,SAAS,EAAE;EAClD,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACvC,IAAIH,SAAS,CAACI,IAAI,CAAEC,CAAC,IAAKA,CAAC,KAAK,EAAE,CAAC,EAAE;MACjC,MAAM,IAAIC,KAAK,CAAC,kDAAkD,GAC9D,4BAA4B,CAAC;IACrC;IACAT,sBAAsB,CAACE,WAAW,EAAEC,SAAS,CAACO,MAAM,CAAC;EACzD;EACA,OAAOZ,oBAAoB,CAACI,WAAW,CAACS,IAAI,CAAC,EAAE,CAAC,CAAC;AACrD;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,OAAO,EAAE;EACnC,OAAOf,oBAAoB,CAACe,OAAO,CAACC,GAAG,CAACf,YAAY,CAAC,CAACY,IAAI,CAAC,EAAE,CAAC,CAAC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,aAAaA,CAACC,KAAK,EAAE;EACjC,OAAOlB,oBAAoB,CAACmB,IAAI,CAACC,SAAS,CAACF,KAAK,CAAC,CAACG,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAAClB,WAAW,EAAE,GAAGC,SAAS,EAAE;EAC1D,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACvC,IAAIH,SAAS,CAACI,IAAI,CAAEC,CAAC,IAAKA,CAAC,KAAK,EAAE,CAAC,EAAE;MACjC,MAAM,IAAIC,KAAK,CAAC,0DAA0D,GACtE,4BAA4B,CAAC;IACrC;IACAT,sBAAsB,CAACE,WAAW,EAAEC,SAAS,CAACO,MAAM,CAAC;EACzD;EACA,OAAO,CAAC,GAAGW,SAAS,KAAK;IACrB,MAAMC,MAAM,GAAGD,SAAS,CAACP,GAAG,CAAES,CAAC,IAAKR,aAAa,CAACQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC;IAChE,OAAO1B,oBAAoB,CAAC,IAAII,WAAW,CAACS,IAAI,CAAC,EAAE,CAAC,KAAKW,MAAM,CAACX,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;EACjF,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}