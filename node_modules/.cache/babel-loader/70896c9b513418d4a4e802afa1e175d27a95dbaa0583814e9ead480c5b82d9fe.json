{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { unwrapUrlOrSanitize } from '../../builders/url_builders.js';\n/**\n * open calls {@link Window.open} on the given {@link Window}, given a\n * target {@link Url}.\n */\nexport function open(win, url, target, features) {\n  const sanitizedUrl = unwrapUrlOrSanitize(url);\n  if (sanitizedUrl !== undefined) {\n    return win.open(sanitizedUrl, target, features);\n  }\n  return null;\n}\n/** Returns CSP nonce, if set for any script tag. */\nexport function getScriptNonce(win) {\n  return getNonceFor('script', win);\n}\n/** Returns CSP nonce, if set for any style tag. */\nexport function getStyleNonce(win) {\n  return getNonceFor('style', win);\n}\nfunction getNonceFor(elementName, win) {\n  var _a;\n  const doc = win.document;\n  // document.querySelector can be undefined in non-browser environments.\n  const el = (_a = doc.querySelector) === null || _a === void 0 ? void 0 : _a.call(doc, `${elementName}[nonce]`);\n  if (el) {\n    // Try to get the nonce from the IDL property first, because browsers that\n    // implement additional nonce protection features (currently only Chrome) to\n    // prevent nonce stealing via CSS do not expose the nonce via attributes.\n    // See https://github.com/whatwg/html/issues/2369\n    return el['nonce'] || el.getAttribute('nonce') || '';\n  }\n  return '';\n}","map":{"version":3,"names":["unwrapUrlOrSanitize","open","win","url","target","features","sanitizedUrl","undefined","getScriptNonce","getNonceFor","getStyleNonce","elementName","_a","doc","document","el","querySelector","call","getAttribute"],"sources":["E:/HTML/Udemy_Full Stack Web/AI-SCET Website/aiscet/node_modules/safevalues/dist/mjs/dom/globals/window.js"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { unwrapUrlOrSanitize } from '../../builders/url_builders.js';\n/**\n * open calls {@link Window.open} on the given {@link Window}, given a\n * target {@link Url}.\n */\nexport function open(win, url, target, features) {\n    const sanitizedUrl = unwrapUrlOrSanitize(url);\n    if (sanitizedUrl !== undefined) {\n        return win.open(sanitizedUrl, target, features);\n    }\n    return null;\n}\n/** Returns CSP nonce, if set for any script tag. */\nexport function getScriptNonce(win) {\n    return getNonceFor('script', win);\n}\n/** Returns CSP nonce, if set for any style tag. */\nexport function getStyleNonce(win) {\n    return getNonceFor('style', win);\n}\nfunction getNonceFor(elementName, win) {\n    var _a;\n    const doc = win.document;\n    // document.querySelector can be undefined in non-browser environments.\n    const el = (_a = doc.querySelector) === null || _a === void 0 ? void 0 : _a.call(doc, `${elementName}[nonce]`);\n    if (el) {\n        // Try to get the nonce from the IDL property first, because browsers that\n        // implement additional nonce protection features (currently only Chrome) to\n        // prevent nonce stealing via CSS do not expose the nonce via attributes.\n        // See https://github.com/whatwg/html/issues/2369\n        return el['nonce'] || el.getAttribute('nonce') || '';\n    }\n    return '';\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,mBAAmB,QAAQ,gCAAgC;AACpE;AACA;AACA;AACA;AACA,OAAO,SAASC,IAAIA,CAACC,GAAG,EAAEC,GAAG,EAAEC,MAAM,EAAEC,QAAQ,EAAE;EAC7C,MAAMC,YAAY,GAAGN,mBAAmB,CAACG,GAAG,CAAC;EAC7C,IAAIG,YAAY,KAAKC,SAAS,EAAE;IAC5B,OAAOL,GAAG,CAACD,IAAI,CAACK,YAAY,EAAEF,MAAM,EAAEC,QAAQ,CAAC;EACnD;EACA,OAAO,IAAI;AACf;AACA;AACA,OAAO,SAASG,cAAcA,CAACN,GAAG,EAAE;EAChC,OAAOO,WAAW,CAAC,QAAQ,EAAEP,GAAG,CAAC;AACrC;AACA;AACA,OAAO,SAASQ,aAAaA,CAACR,GAAG,EAAE;EAC/B,OAAOO,WAAW,CAAC,OAAO,EAAEP,GAAG,CAAC;AACpC;AACA,SAASO,WAAWA,CAACE,WAAW,EAAET,GAAG,EAAE;EACnC,IAAIU,EAAE;EACN,MAAMC,GAAG,GAAGX,GAAG,CAACY,QAAQ;EACxB;EACA,MAAMC,EAAE,GAAG,CAACH,EAAE,GAAGC,GAAG,CAACG,aAAa,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACK,IAAI,CAACJ,GAAG,EAAE,GAAGF,WAAW,SAAS,CAAC;EAC9G,IAAII,EAAE,EAAE;IACJ;IACA;IACA;IACA;IACA,OAAOA,EAAE,CAAC,OAAO,CAAC,IAAIA,EAAE,CAACG,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE;EACxD;EACA,OAAO,EAAE;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}