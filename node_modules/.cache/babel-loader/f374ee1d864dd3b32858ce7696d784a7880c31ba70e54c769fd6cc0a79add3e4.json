{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/** Class for holding element and attribute policies used for sanitization. */\nexport class SanitizerTable {\n  constructor(allowedElements, elementPolicies, allowedGlobalAttributes, globalAttributePolicies, globallyAllowedAttributePrefixes) {\n    this.allowedElements = allowedElements;\n    this.elementPolicies = elementPolicies;\n    this.allowedGlobalAttributes = allowedGlobalAttributes;\n    this.globalAttributePolicies = globalAttributePolicies;\n    this.globallyAllowedAttributePrefixes = globallyAllowedAttributePrefixes;\n  }\n  isAllowedElement(elementName) {\n    // Note: `HTMLFormElement`s are always dropped, supporting them is very\n    // costly because of the DOM clobberring they can cause. The additional code\n    // size required to properly work around DOM clobberring issues is large and\n    // shouldn't be put on every user of the sanitizer. Thoroughly review\n    // b/210975025 and the CLs linked there before you start allowing form\n    // elements.\n    return elementName !== 'FORM' && (this.allowedElements.has(elementName) || this.elementPolicies.has(elementName));\n  }\n  getAttributePolicy(attributeName, elementName) {\n    const elementPolicy = this.elementPolicies.get(elementName);\n    if (elementPolicy === null || elementPolicy === void 0 ? void 0 : elementPolicy.has(attributeName)) {\n      return elementPolicy.get(attributeName);\n    }\n    if (this.allowedGlobalAttributes.has(attributeName)) {\n      return {\n        policyAction: AttributePolicyAction.KEEP\n      };\n    }\n    const globalPolicy = this.globalAttributePolicies.get(attributeName);\n    if (globalPolicy) {\n      return globalPolicy;\n    }\n    if (this.globallyAllowedAttributePrefixes && [...this.globallyAllowedAttributePrefixes].some(prefix => attributeName.indexOf(prefix) === 0)) {\n      return {\n        policyAction: AttributePolicyAction.KEEP\n      };\n    }\n    return {\n      policyAction: AttributePolicyAction.DROP\n    };\n  }\n}\n/**\n * Values derived from\n * https://godoc.corp.google.com/pkg/google3/third_party/safehtml/sanitizer/policy#AttributePolicy\n */\nexport var AttributePolicyAction;\n(function (AttributePolicyAction) {\n  AttributePolicyAction[AttributePolicyAction[\"DROP\"] = 0] = \"DROP\";\n  AttributePolicyAction[AttributePolicyAction[\"KEEP\"] = 1] = \"KEEP\";\n  AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_SANITIZE_URL\"] = 2] = \"KEEP_AND_SANITIZE_URL\";\n  AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_NORMALIZE\"] = 3] = \"KEEP_AND_NORMALIZE\";\n  // This action is currently equivalent to KEEP as there is no style sanitizer.\n  AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_SANITIZE_STYLE\"] = 4] = \"KEEP_AND_SANITIZE_STYLE\";\n  AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_USE_RESOURCE_URL_POLICY\"] = 5] = \"KEEP_AND_USE_RESOURCE_URL_POLICY\";\n  AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_USE_RESOURCE_URL_POLICY_FOR_SRCSET\"] = 6] = \"KEEP_AND_USE_RESOURCE_URL_POLICY_FOR_SRCSET\";\n})(AttributePolicyAction || (AttributePolicyAction = {}));\n// From the spec:\n// https://html.spec.whatwg.org/multipage/custom-elements.html#prod-potentialcustomelementname:~:text=name%20must%20not%20be%20any%20of%20the%20following%3A\nconst FORBIDDEN_CUSTOM_ELEMENT_NAMES = new Set(['ANNOTATION-XML', 'COLOR-PROFILE', 'FONT-FACE', 'FONT-FACE-SRC', 'FONT-FACE-URI', 'FONT-FACE-FORMAT', 'FONT-FACE-NAME', 'MISSING-GLYPH']);\n/**\n * Helper for checking if an element tag is a custom element.\n */\nexport function isCustomElement(tag) {\n  return !FORBIDDEN_CUSTOM_ELEMENT_NAMES.has(tag.toUpperCase()) && /^[a-z][-_.a-z0-9]*-[-_.a-z0-9]*$/i.test(tag);\n}","map":{"version":3,"names":["SanitizerTable","constructor","allowedElements","elementPolicies","allowedGlobalAttributes","globalAttributePolicies","globallyAllowedAttributePrefixes","isAllowedElement","elementName","has","getAttributePolicy","attributeName","elementPolicy","get","policyAction","AttributePolicyAction","KEEP","globalPolicy","some","prefix","indexOf","DROP","FORBIDDEN_CUSTOM_ELEMENT_NAMES","Set","isCustomElement","tag","toUpperCase","test"],"sources":["E:/HTML/Udemy_Full Stack Web/AI-SCET Website/aiscet/node_modules/safevalues/dist/mjs/builders/html_sanitizer/sanitizer_table/sanitizer_table.js"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/** Class for holding element and attribute policies used for sanitization. */\nexport class SanitizerTable {\n    constructor(allowedElements, elementPolicies, allowedGlobalAttributes, globalAttributePolicies, globallyAllowedAttributePrefixes) {\n        this.allowedElements = allowedElements;\n        this.elementPolicies = elementPolicies;\n        this.allowedGlobalAttributes = allowedGlobalAttributes;\n        this.globalAttributePolicies = globalAttributePolicies;\n        this.globallyAllowedAttributePrefixes = globallyAllowedAttributePrefixes;\n    }\n    isAllowedElement(elementName) {\n        // Note: `HTMLFormElement`s are always dropped, supporting them is very\n        // costly because of the DOM clobberring they can cause. The additional code\n        // size required to properly work around DOM clobberring issues is large and\n        // shouldn't be put on every user of the sanitizer. Thoroughly review\n        // b/210975025 and the CLs linked there before you start allowing form\n        // elements.\n        return (elementName !== 'FORM' &&\n            (this.allowedElements.has(elementName) ||\n                this.elementPolicies.has(elementName)));\n    }\n    getAttributePolicy(attributeName, elementName) {\n        const elementPolicy = this.elementPolicies.get(elementName);\n        if (elementPolicy === null || elementPolicy === void 0 ? void 0 : elementPolicy.has(attributeName)) {\n            return elementPolicy.get(attributeName);\n        }\n        if (this.allowedGlobalAttributes.has(attributeName)) {\n            return { policyAction: AttributePolicyAction.KEEP };\n        }\n        const globalPolicy = this.globalAttributePolicies.get(attributeName);\n        if (globalPolicy) {\n            return globalPolicy;\n        }\n        if (this.globallyAllowedAttributePrefixes &&\n            [...this.globallyAllowedAttributePrefixes].some((prefix) => attributeName.indexOf(prefix) === 0)) {\n            return { policyAction: AttributePolicyAction.KEEP };\n        }\n        return { policyAction: AttributePolicyAction.DROP };\n    }\n}\n/**\n * Values derived from\n * https://godoc.corp.google.com/pkg/google3/third_party/safehtml/sanitizer/policy#AttributePolicy\n */\nexport var AttributePolicyAction;\n(function (AttributePolicyAction) {\n    AttributePolicyAction[AttributePolicyAction[\"DROP\"] = 0] = \"DROP\";\n    AttributePolicyAction[AttributePolicyAction[\"KEEP\"] = 1] = \"KEEP\";\n    AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_SANITIZE_URL\"] = 2] = \"KEEP_AND_SANITIZE_URL\";\n    AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_NORMALIZE\"] = 3] = \"KEEP_AND_NORMALIZE\";\n    // This action is currently equivalent to KEEP as there is no style sanitizer.\n    AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_SANITIZE_STYLE\"] = 4] = \"KEEP_AND_SANITIZE_STYLE\";\n    AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_USE_RESOURCE_URL_POLICY\"] = 5] = \"KEEP_AND_USE_RESOURCE_URL_POLICY\";\n    AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_USE_RESOURCE_URL_POLICY_FOR_SRCSET\"] = 6] = \"KEEP_AND_USE_RESOURCE_URL_POLICY_FOR_SRCSET\";\n})(AttributePolicyAction || (AttributePolicyAction = {}));\n// From the spec:\n// https://html.spec.whatwg.org/multipage/custom-elements.html#prod-potentialcustomelementname:~:text=name%20must%20not%20be%20any%20of%20the%20following%3A\nconst FORBIDDEN_CUSTOM_ELEMENT_NAMES = new Set([\n    'ANNOTATION-XML',\n    'COLOR-PROFILE',\n    'FONT-FACE',\n    'FONT-FACE-SRC',\n    'FONT-FACE-URI',\n    'FONT-FACE-FORMAT',\n    'FONT-FACE-NAME',\n    'MISSING-GLYPH',\n]);\n/**\n * Helper for checking if an element tag is a custom element.\n */\nexport function isCustomElement(tag) {\n    return (!FORBIDDEN_CUSTOM_ELEMENT_NAMES.has(tag.toUpperCase()) &&\n        /^[a-z][-_.a-z0-9]*-[-_.a-z0-9]*$/i.test(tag));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}